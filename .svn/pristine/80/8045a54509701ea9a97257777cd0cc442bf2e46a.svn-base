package com.fc.member.store.user.handler;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.fc.common.exception.ErrorCode;
import com.fc.member.store.user.entity.StorePackage;
import com.fc.member.store.user.service.IStorePackageService;
import com.fc.member.store.user.service.IStoreWechatService;
import com.fc.protocol.common.message.body.ProtocolResponse;
import com.fc.protocol.demo.request.store.user.QueryStorePackageRequest;
import com.fc.protocol.demo.request.store.user.QueryStorePackageStatusRequest;
import com.fc.protocol.demo.request.store.user.UpdateStorePackageRequest;
import com.fc.protocol.server.handler.Handler;
import com.fc.protocol.server.handler.ReqCodeMapping;

/**
 * 储值卡套餐
 * @author jiahx
 * @date 2019-1-3
 */
@Component
@Handler(module = "store")
public class StorePackageHandler {

	private static Logger log = LoggerFactory.getLogger(StorePackageHandler.class);

	@Autowired
	IStorePackageService storePackageService;
	@Autowired
	IStoreWechatService storeWechatService;

	/**
	 * 查询门店储值卡套餐列表
	 * @author	jiahx
	 * @see update_name:jiahx update_time:2019-1-7
	 * @param request
	 * @return
	 */
	@ReqCodeMapping(requestClazz = QueryStorePackageRequest.class)
	public ProtocolResponse queryStorePackage(QueryStorePackageRequest request) {
		log.info("StorePackageHandler------>requestQueryStorePackage:{}", request);
		ProtocolResponse response = ProtocolResponse.newInstance().success();
		try {
			//校验参数是否为空
			String validResult = request.paramValidate();
			if(validResult != null ) {
				return response.error(ErrorCode.PARAM_DATA.getValue()).msg(validResult);
			}
			//排序规则：按充值金额升序排列，充值金额相同时按赠送金额升序排列，未编辑状态的充值套餐排在最下。
			List<StorePackage> storePackageList =  storePackageService.getOrderBY(request);
			response.addData("store_package_list", storePackageList);
			log.info("查询结果storePackageList" + storePackageList);
		} catch (Exception e) {
			response.error(ErrorCode.QUERY_ERROR.getValue()).msg(ErrorCode.QUERY_ERROR.getDesc());
			log.error("queryStorePackage系统异常", e);
		}
		log.info("StorePackageHandler------>responseQueryStorePackage:{}", response);
		return response;
	}
	/**
	 * 查询门店当前上架的套餐数,且后台状态为启用(在store_wechat判断)
	 * @author	jiahx
	 * @see update_name:jiahx update_time:2019-1-7
	 * @param request
	 * @return
	 */
	@ReqCodeMapping(requestClazz = QueryStorePackageStatusRequest.class)
	public ProtocolResponse queryStorePackageStatus(QueryStorePackageStatusRequest request) {
		log.info("StorePackageHandler------>requestQueryStorePackageStatus:{}", request);
		ProtocolResponse response = ProtocolResponse.newInstance().success();
		try {
			//校验参数是否为空
			String validResult = request.paramValidate();
			if(validResult != null ) {
				return response.error(ErrorCode.PARAM_DATA.getValue()).msg(validResult);
			}
			//查询该门店已上架套餐
			List<StorePackage> storePackageList = storePackageService.getStatus(request);
			response.addData("store_package_list", storePackageList);
			log.info("查询结果storePackageList"+storePackageList);
		} catch (Exception e) {
			response.error(ErrorCode.QUERY_ERROR.getValue()).msg(ErrorCode.QUERY_ERROR.getDesc());
			log.error("queryStorePackageStatus系统异常", e);
		}
		log.info("StorePackageHandler------>responseQueryStorePackageStatus:{}", response);
		return response;
	}
	/**
	 * 更新门店储值卡套餐
	 * @author	jiahx
	 * @see update_name:jiahx update_time:2019-1-7
	 * @param request
	 * @return
	 */
	@ReqCodeMapping(requestClazz = UpdateStorePackageRequest.class)
	public ProtocolResponse updateStorePackage(UpdateStorePackageRequest request) {
		log.info("StorePackageHandler------>requestUpdateStorePackage:{}", request);
		ProtocolResponse response = ProtocolResponse.newInstance().success();
		try {
			//校验参数是否为空
			String validResult = request.paramValidate();
			if(validResult != null ) {
				return response.error(ErrorCode.PARAM_DATA.getValue()).msg(validResult);
			}
			storePackageService.updateStorePackage(request);
		} catch (Exception e) {
			response.error(ErrorCode.UPDATE_ERROR.getValue()).msg(ErrorCode.UPDATE_ERROR.getDesc());
			log.error("updateStorePackage系统异常", e);
		}
		log.info("StorePackageHandler------>responseUpdateStorePackage:{}", response);
		return response;
	}
}
