package com.fc.member.store.user.handler;

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.fc.member.store.user.entity.PublicUser;
import com.fc.member.store.user.service.IPublicUserService;
import com.fc.protocol.common.message.body.ProtocolResponse;
import com.fc.protocol.demo.request.store.user.PublicUserLoginRequest;
import com.fc.protocol.demo.request.store.user.PublicUserPasswordRequest;
import com.fc.protocol.server.handler.Handler;
import com.fc.protocol.server.handler.ReqCodeMapping;

/**
 * 用户public_user表基础操作Handler
 * @author	xiaozw
 * @data	2019-1-4
 */
@Component
@Handler(module = "publicuser")
public class PublicUserHandler {
	private static Logger log = LoggerFactory.getLogger(PublicUserHandler.class);

	@Autowired
	private IPublicUserService publicUserService;

	/**
	 * 修改用户密码接口
	 * @author	xiaozw
	 * @see update_name:xiaozw update_time:2019-1-4
	 * @param request
	 */
	@ReqCodeMapping(requestClazz = PublicUserPasswordRequest.class)
	public ProtocolResponse updatePassword(PublicUserPasswordRequest request) {
		try {
			log.info("StorePublicUserHandler------>request:{}" + request);
			String validateResult = request.paramValidate();
			if (validateResult != null) {
				return ProtocolResponse.newInstance().error(99).msg(validateResult);
			}
			Map<String, String> resultStatus = publicUserService.updatePasswordByUserId(request.getPublicUserId(),
					request.getPassword());
			if (resultStatus.isEmpty()) {
				return ProtocolResponse.newInstance().success();
			} else {
				return ProtocolResponse.newInstance().error(99).msg(resultStatus.get("error"));
			}
		} catch (Exception e) {
			log.info("createUser:", e.getMessage());
			e.printStackTrace();
			return ProtocolResponse.newInstance().error(99).msg("代码异常，请联系开发人员");
		}
	}

	/**
	 * 根据用户名查询用户接口
	 * @author	xiaozw
	 * @see update_name:xiaozw update_time:2019-1-4
	 * @param request
	 */
	@ReqCodeMapping(requestClazz = PublicUserLoginRequest.class)
	public ProtocolResponse updatePassword(PublicUserLoginRequest request) {
		try {
			log.info("StorePublicUserHandler------>request:{}" + request);
			String validateResult = request.paramUserNameValidate();
			if (validateResult != null) {
				return ProtocolResponse.newInstance().error(99).msg(validateResult);
			}

			PublicUser pu = publicUserService.getPublicUser(request);
			if (pu == null) {
				return ProtocolResponse.newInstance().error(99).msg("该用户不存在");
			} else {
				return ProtocolResponse.newInstance().error(99).msg("该用户不存在");
			}
		} catch (Exception e) {
			log.info("createUser:", e.getMessage());
			e.printStackTrace();
			return ProtocolResponse.newInstance().error(99).msg("代码异常，请联系开发人员");
		}
	}
}
