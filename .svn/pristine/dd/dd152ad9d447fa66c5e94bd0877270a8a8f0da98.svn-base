package com.fc.protocol.client.demo.controller;


import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.fc.protocol.client.IProtocolClient;
import com.fc.protocol.client.demo.config.ProtocolClientPool;
import com.fc.protocol.common.message.body.ProtocolResponse;
import com.fc.protocol.demo.request.store.user.StoreCollectRequest;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
/**
 * 门店商品收藏
 * @author wangq
 * @date 2019/1/3
 */
@Api(tags = "StoreCollectController",description = "商品收藏")
@RestController
@RequestMapping("/store/user")
public class StoreCollectController {
	
	private static Logger log = LoggerFactory.getLogger(StoreCollectController.class);
	
	@Autowired
	private ProtocolClientPool protocolClientPool;
	
	/**
	 * 门店收藏列表
	 * @param request
	 * @param response
	 * @param storeCollectRequest
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/storeCollectList", method = {RequestMethod.POST,RequestMethod.GET}) 
	@ApiOperation(value = "storeCollectList", notes = "查询门店商品收藏")
	@ResponseBody
	public Object storeCollectList(HttpServletRequest request, HttpServletResponse response,StoreCollectRequest storeCollectRequest)throws Exception {
		storeCollectRequest.setReqCode("storeCollectList");
		log.info("storeCollectList-request:{}",storeCollectRequest);
		log.info("protocolClientPool--->null?--->{}", (protocolClientPool == null));
		IProtocolClient userClient = protocolClientPool.userClient();
		log.info("userClient--->null?--->{}" + (userClient == null));
		ProtocolResponse protocolResponse = protocolClientPool.userClient().sendAndReceived(storeCollectRequest);
		log.info("storeCollectList-response:{}",protocolResponse);
		return protocolResponse;
		
	}
	
	/**
	 * 新增商品收藏
	 * @param request
	 * @param response
	 * @param storeCollectRequest
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/storeCollectCreate", method = {RequestMethod.POST,RequestMethod.GET})
	@ApiOperation(value ="storeCollectCreate", notes = "新增商品收藏")
	@ResponseBody
	public Object storeCollectCreate(HttpServletRequest request, HttpServletResponse response, StoreCollectRequest storeCollectRequest) throws Exception {
		log.info("storeCollectCreate-request:{}",storeCollectRequest);
		log.info("protocolClientPoll--->null?--->{}",(protocolClientPool == null));
		IProtocolClient userClient = protocolClientPool.userClient();
		log.info("userClient--->null?--->{}" + (userClient == null));
		ProtocolResponse protocolResponse = protocolClientPool.userClient().sendAndReceived(storeCollectRequest);
		log.info("storeCollectCreate-response:{}",protocolResponse);
		return protocolResponse;
	}
	
	/**
	 * 删除商品收藏
	 * @param request
	 * @param response
	 * @param storeCollectRequest
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/storeCollectDelete", method = {RequestMethod.POST,RequestMethod.GET})
	@ApiOperation(value = "删除商品收藏", notes = "删除商品收藏")
	@ResponseBody
	public Object storeCollectDelete(HttpServletRequest request, HttpServletResponse response, StoreCollectRequest storeCollectRequest)throws Exception {
		storeCollectRequest.setReqCode("storeCollectDelete");
		log.info("storeCollectDelete-request:{}",storeCollectRequest);
		log.info("protocolClientPoll--->null?---?{}", (protocolClientPool == null));
		IProtocolClient userClient = protocolClientPool.userClient();
		log.info("userClient--->null?--->{}" + (userClient == null));
		ProtocolResponse protocolResponse = protocolClientPool.userClient().sendAndReceived(storeCollectRequest);
		log.info("storeCollectDelete-respone:{}",protocolResponse);
		return protocolResponse;
		
	}

}
