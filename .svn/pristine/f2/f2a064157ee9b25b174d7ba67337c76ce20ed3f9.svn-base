package com.fc.member.store.user.handler;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.fc.common.exception.ErrorCode;
import com.fc.member.store.user.entity.StoreCoupon;
import com.fc.member.store.user.service.IStoreCouponService;
import com.fc.protocol.common.message.body.ProtocolResponse;
import com.fc.protocol.demo.request.store.user.StoreCouponCreateRequest;
import com.fc.protocol.demo.request.store.user.StoreCouponQueryRequest;
import com.fc.protocol.demo.request.store.user.StoreCouponUpdateRequest;
import com.fc.protocol.server.handler.Handler;
import com.fc.protocol.server.handler.ReqCodeMapping;

/**
 * 储值卡使用范围
 * @author jiahx
 * @date 2019-1-2
 */
@Component
@Handler(module = "store")
public class StoreCouponHandler {

	private static Logger log = LoggerFactory.getLogger(StoreCouponHandler.class);

	@Autowired
	IStoreCouponService storeCouponService;

	/**
	 * 查询门店储值卡使用范围
	 * @author	jiahx
	 * @see update_name:jiahx update_time:2019-1-7
	 * @param request
	 * @return
	 */
	@ReqCodeMapping(requestClazz = StoreCouponQueryRequest.class)
	public ProtocolResponse storeCouponQuery(StoreCouponQueryRequest request) {
		log.info("StoreCouponHandler------>requestStoreCouponQuery:{}", request);
		ProtocolResponse response = ProtocolResponse.newInstance().success();
		try {
			//校验参数是否为空
			String validResult = request.paramValidate();
			if(validResult != null ) {
				return response.error(ErrorCode.PARAM_DATA.getValue()).msg(validResult);
			}
			StoreCoupon storeCoupon =  storeCouponService.getQuery(request);
			response.addData("store_coupon", storeCoupon);
			log.info("查询结果storeCoupon" + storeCoupon);
		} catch (Exception e) {
			response.error(ErrorCode.QUERY_ERROR.getValue()).msg(ErrorCode.QUERY_ERROR.getDesc());
			log.error("queryStoreCoupon系统异常", e);
		}
		log.info("StoreCouponHandler------>responseStoreCouponQuery:{}", response);
		return response;
	}
	/**
	 * 更新门店套餐使用范围
	 * @author	jiahx
	 * @see update_name:jiahx update_time:2019-1-7
	 * @param request
	 * @return
	 */
	@ReqCodeMapping(requestClazz = StoreCouponUpdateRequest.class)
	public ProtocolResponse storeCouponUpdate(StoreCouponUpdateRequest request) {
		log.info("StoreCouponHandler------>requestStoreCouponUpdate:{}", request);
		ProtocolResponse response = ProtocolResponse.newInstance().success();
		try {
			//校验参数是否为空
			String validResult = request.paramValidate();
			if(validResult != null ) {
				return response.error(ErrorCode.PARAM_DATA.getValue()).msg(validResult);
			}
			boolean flag = storeCouponService.updateStoreCoupon(request);
			if(!flag) {
				return response.error(ErrorCode.UPDATE_ERROR.getValue()).msg(ErrorCode.UPDATE_ERROR.getDesc());
			}
		} catch (Exception e) {
			response.error(ErrorCode.UPDATE_ERROR.getValue()).msg(ErrorCode.UPDATE_ERROR.getDesc());
			log.error("updateStoreCoupon系统异常", e);
		}
		log.info("StoreCouponHandler------>responseStoreCouponUpdate:{}", response);
		return response;
	}
	@ReqCodeMapping(requestClazz = StoreCouponCreateRequest.class)
	public ProtocolResponse storeCouponCreate(StoreCouponCreateRequest request) {
		log.info("StoreCouponHandler------>requestStoreCouponCreate:{}", request);
		ProtocolResponse response = ProtocolResponse.newInstance().success();
		try {
			//校验参数是否为空
			String validResult = request.paramValidate();
			if(validResult != null ) {
				return response.error(ErrorCode.PARAM_DATA.getValue()).msg(validResult);
			}
			//新增之前先去查询，防止意外调用两次
			StoreCouponQueryRequest requestQuery = new StoreCouponQueryRequest();
			requestQuery.setStoreId(request.getStoreId());
			StoreCoupon storeCoupon =  storeCouponService.getQuery(requestQuery);
			if(storeCoupon!=null) {
				response.code(ErrorCode.REPEAT_DATA.getValue()).msg(ErrorCode.REPEAT_DATA.getDesc());
			}
			int numResult= storeCouponService.insertStoreCoupon(request);
			if(numResult==0) {
				response.code(ErrorCode.CREATE_ERROR.getValue()).msg(ErrorCode.CREATE_ERROR.getDesc());
			}
			log.info("createStoreCoupon=====>"+numResult);
		} catch (Exception e) {
			response.code(ErrorCode.CREATE_ERROR.getValue()).msg(ErrorCode.CREATE_ERROR.getDesc());
			log.error("createStoreCoupon系统异常", e);
		}
		log.info("StoreCouponHandler------>responseStoreCouponCreate:{}", response);
		return response;
	}
}
