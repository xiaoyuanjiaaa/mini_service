package com.fc.member.store.user.handler;

import com.fc.member.store.user.service.IStoreBankCardChangeService;
import com.fc.member.store.user.service.IStoreBankCardService;
import com.fc.protocol.common.message.body.ProtocolResponse;
import com.fc.protocol.demo.request.store.user.CreateStoreBankCardRequest;
import com.fc.protocol.demo.request.store.user.StoreBankCardChangeRequest;
import com.fc.protocol.server.handler.Handler;
import com.fc.protocol.server.handler.ReqCodeMapping;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.Map;

/**
 * 银行卡信息
 *
 * @author zhuj
 * @date 2018/12/28
 * @update_name
 * @update_time
 */
@Component
@Handler(module = "demo")
public class StoreBankCardHandler {
    private static Logger log = LoggerFactory.getLogger(StoreBankCardHandler.class);
    @Autowired
    private IStoreBankCardService storeBankCardService;
    @Autowired
    private IStoreBankCardChangeService storeBankCardChangeService;

    /**
     * @param
     * @author zhuj
     * 获取银行卡信息
     * @update_name
     * @update_time
     */
    @ReqCodeMapping(requestClazz = CreateStoreBankCardRequest.class)
    public ProtocolResponse checkStoreBankCardInfo(CreateStoreBankCardRequest request) {
        log.info("银行卡信息request", request);
        ProtocolResponse response = ProtocolResponse.newInstance().success();
        //验证参数是否为空
        String validateResult = request.paramValidatecheck();
        if (validateResult != null) {
            return response.error(99).msg(validateResult);
        }
        try {
            //获取门店绑定的银行卡信息
            Map<String, Object> storeBankCardinfo = storeBankCardService.getStoreBankCardInfo(request.getStoreId());
            if (null != storeBankCardinfo) {
                response.code(0).msg("已经绑定银行卡").setData(storeBankCardinfo);
            } else {
                response.code(0).msg("未绑定银行卡");
            }
        } catch (Exception e) {
            response.code(99).msg("验证异常");
            e.printStackTrace();
        }
        return response;
    }

    /**
     * @param
     * @author zhuj
     * 绑定银行卡信息
     * @update_name
     * @update_time
     */
    @ReqCodeMapping(requestClazz = CreateStoreBankCardRequest.class)
    public ProtocolResponse createStoreBankCardInfo(CreateStoreBankCardRequest request) {
        log.info("绑定银行卡信息request", request);
        ProtocolResponse response = ProtocolResponse.newInstance().success();
        //验证参数是否为空
        String validateResult = request.paramValidate();
        if (validateResult != null) {
            return response.error(99).msg(validateResult);
        }
        try {
            if (storeBankCardService.inputStoreBankCardInfo(request)) {
                response.code(0).msg("保存成功");
            } else {
                response.code(99).msg("保存失败");
            }

        } catch (Exception e) {
            response.code(99).msg("保存失败");
            e.printStackTrace();
        }
        return response;
    }

    /**
     * @param
     * @author zhuj
     * 修改银行卡信息
     * @update_name
     * @update_time
     */
    @ReqCodeMapping(requestClazz = CreateStoreBankCardRequest.class)
    public ProtocolResponse changeStoreBankCardInfo(CreateStoreBankCardRequest request) {
        log.info("修改银行卡信息request", request);
        ProtocolResponse response = ProtocolResponse.newInstance().success();
        //验证参数是否为空
        String validateResult = request.paramValidate();
        if (validateResult != null) {
            return response.error(99).msg(validateResult);
        }
        try {
            if (storeBankCardService.changeStoreBankCardInfo(request)) {
                response.code(0).msg("修改成功");
            } else {
                response.code(99).msg("修改失败");
            }
        } catch (Exception e) {
            response.code(99).msg("修改失败");
            e.printStackTrace();
        }
        return response;
    }

    /**
     * @param
     * @author zhuj
     * 获取门店银行卡修改记录
     * @update_name
     * @update_time
     */
    @ReqCodeMapping(requestClazz = StoreBankCardChangeRequest.class)
    public ProtocolResponse getStoreBankCardChange(StoreBankCardChangeRequest request) {
        log.info("银行卡记录request", request);
        ProtocolResponse response = ProtocolResponse.newInstance().success();
        //验证参数是否为空
        String validateResult = request.paramValidatecheck();
        if (validateResult != null) {
            return response.error(99).msg(validateResult);
        }
        try {
            //获取门店绑定的银行卡信息
            Map<String, Object> storeBankCardinfo = storeBankCardChangeService.getStoreBankCardChangeList(request);
            response.code(0).msg("获取修改银行卡记录").setData(storeBankCardinfo);
        } catch (Exception e) {
            response.code(99).msg("获取异常");
            e.printStackTrace();
        }
        return response;
    }
}
