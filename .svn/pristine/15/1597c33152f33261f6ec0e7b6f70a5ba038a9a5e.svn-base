package com.fc.member.pc.user.handler;

import com.fc.common.exception.ErrorCode;
import com.fc.common.plugin.mybatis.Page;
import com.fc.member.pc.user.entity.PcUser;
import com.fc.member.pc.user.service.IPcUserService;
import com.fc.protocol.common.message.body.ProtocolResponse;
import com.fc.protocol.demo.request.pc.user.*;
import com.fc.protocol.server.handler.Handler;
import com.fc.protocol.server.handler.ReqCodeMapping;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.Map;

/**PC收银 - 车主信息
 * @Author: linpeng
 * @Date: 2019/1/4 14:58
 * @Version 1.0
 */
@Component
@Handler(module = "pc")
public class PcUserHandler {

    private static Logger log = LoggerFactory.getLogger(PcUserHandler.class);

    @Autowired
    IPcUserService pcUserService;

    /** 
     * @Description: 查询PC收银车主信息
     * @Param: [request] 
     * @return: com.fc.protocol.common.message.body.ProtocolResponse 
     * @Author: linpeng
     * @CreateDate: 2019/1/5
     * @Update: linpeng
     * @UpdateDate: 2019/1/5
     */ 
    @ReqCodeMapping(requestClazz = PcUserGetRequest.class)
    public ProtocolResponse pcUserGet(PcUserGetRequest request) {
        log.info("获取PC收银车主信息详情------>request:{}", request);
        ProtocolResponse response=null;
        try {
            //校验参数是否为空
            String validResult = request.paramValidate();
            if(validResult != null ) {
               return response = ProtocolResponse.newInstance().error(ErrorCode.PARAM_DATA.getValue()).msg(validResult);
            }
            log.info("查询PC收银车主信息详情，pc_user_id:{}",request.getPcUserId());
            PcUser pcUser  = pcUserService.get(request.getPcUserId());
            log.info("查询结果:{}", pcUser);

            if ( pcUser != null){
                response = ProtocolResponse.newInstance().success().addData("pcUser",pcUser);
            }
            else {
                response = ProtocolResponse.newInstance().error(ErrorCode.DATE_NOR_DEFIND.getValue()).msg("该车主信息不存在");
            }
        } catch (Exception e) {
            e.printStackTrace();
            log.info("pcUserGet系统异常！",e);
            return ProtocolResponse.newInstance().error(ErrorCode.QUERY_ERROR.getValue()).msg("代码异常，请联系开发人员！");
        }
        log.info("获取PC收银车主信息详情------>response:{}", response);
        return response;
    }

    /** 
     * @Description: 查询PC收银车主信息列表
     * @Param: [request] 
     * @return: com.fc.protocol.common.message.body.ProtocolResponse 
     * @Author: linpeng
     * @CreateDate: 2019/1/5
     * @Update: linpeng
     * @UpdateDate: 2019/1/5
     */ 
    @ReqCodeMapping(requestClazz = PcUserListRequest.class)
    public ProtocolResponse pcUserList(PcUserListRequest request) {
        log.info("获取PC收银车主信息列表------>request:{}", request);
        ProtocolResponse response=null;
        try {
            //校验参数是否为空
            String validResult = request.paramValidate();
            if(validResult != null ) {
               return response = ProtocolResponse.newInstance().error(ErrorCode.PARAM_DATA.getValue()).msg(validResult);
            }
            Page page = new Page();
            page.setPage(request.getPage());
            page.setRows(request.getPagesize());
            log.info("查询PC收银车主信息列表，page:{}",page);
            List<PcUser> pcUser  = pcUserService.getPcUserList(request,page);
            log.info("查询结果 -----> count:{},data:{}", page.getTotalResult(),pcUser);
            if ( pcUser != null & pcUser.size() != 0){
                response = ProtocolResponse.newInstance().success().addData("pcUser_list",pcUser).addData("count",page.getTotalResult());
            }
            else {
                response = ProtocolResponse.newInstance().error(ErrorCode.DATE_NOR_DEFIND.getValue()).msg("未查到相关的PC收银车主信息列表");
            }
        } catch (Exception e) {
            e.printStackTrace();
            log.info("pcUserList系统异常！",e);
            return ProtocolResponse.newInstance().error(ErrorCode.QUERY_ERROR.getValue()).msg("代码异常，请联系开发人员！");
        }
        log.info("获取PC收银车主信息列表------>response:{}", response);
        return response;
    }


    /** 
     * @Description: 创建PC收银车主
     * @Param: [request] 
     * @return: com.fc.protocol.common.message.body.ProtocolResponse 
     * @Author: linpeng
     * @CreateDate: 2019/1/5
     * @Update: linpeng
     * @UpdateDate: 2019/1/5
     */ 
    @ReqCodeMapping(requestClazz = PcUserSaveRequest.class)
    public ProtocolResponse pcUserSave(PcUserSaveRequest request) {
        log.info("创建PC收银车主------>request:{}", request);
        ProtocolResponse response=null;
        try {
            //校验参数是否为空
            String validResult = request.paramValidate();
            if(validResult != null ) {
               return response = ProtocolResponse.newInstance().error(ErrorCode.PARAM_DATA.getValue()).msg(validResult);
            }
            log.info("创建PC收银车主，fc_user_id:{},mobile:{},name:{}", request.getFcUserId(),request.getMobile(),request.getName());
            Map<String, Object> resultStatus = pcUserService.insertPcUser(request);
            if (resultStatus.isEmpty()) {
                log.info("创建车主成功");
                response = ProtocolResponse.newInstance().success().msg("创建车主信息成功");
            }
            else{
                return ProtocolResponse.newInstance().error(ErrorCode.CREATE_ERROR.getValue()).msg("创建车主信息失败");
            }
        } catch (Exception e) {
            e.printStackTrace();
            log.info("pcUserSave系统异常！",e);
            return ProtocolResponse.newInstance().error(ErrorCode.CREATE_ERROR.getValue()).msg("代码异常，请联系开发人员！");
        }
        log.info("创建PC收银车主信息------>response:{}", response);
        return response;
    }

    /** 
     * @Description: 修改PC收银车主信息
     * @Param: [request] 
     * @return: com.fc.protocol.common.message.body.ProtocolResponse 
     * @Author: linpeng
     * @CreateDate: 2019/1/5
     * @Update: linpeng
     * @UpdateDate: 2019/1/5
     */ 
    @ReqCodeMapping(requestClazz = PcUserUpdateRequest.class)
    public ProtocolResponse pcUserUpdate(PcUserUpdateRequest request) {
        log.info("修改PC收银车主信息------>request:{}", request);
        ProtocolResponse response=null;
        try {
            //校验参数是否为空
            String validResult = request.paramValidate();
            if(validResult != null ) {
               return response = ProtocolResponse.newInstance().error(ErrorCode.PARAM_DATA.getValue()).msg(validResult);
            }
            log.info("修改PC收银车主信息，pc_user_id:{},fc_user_id:{},mobile:{},name:{}", request.getPcUserId(),request.getFcUserId(),request.getMobile(),request.getName());
            //通过pc_user_id查询该用户，
            PcUser pcUser  = pcUserService.get(request.getPcUserId());
            //判断该用户是否存在
            if (pcUser == null) {
                return ProtocolResponse.newInstance().error(ErrorCode.DATE_NOR_DEFIND.getValue()).msg("该车主信息不存在");
            }
            //用户存在，执行后续操作
            log.info("修改前:{}", pcUser);
            Map<String, Object> resultStatus = pcUserService.updatePcUser(request);
            if (resultStatus.isEmpty()) {
                log.info("修改PC收银车主信息成功");
                log.info("修改后:{}", pcUserService.get(request.getPcUserId()));
                response = ProtocolResponse.newInstance().success().msg("修改车主信息成功");
            }
            else{
                return ProtocolResponse.newInstance().error(ErrorCode.UPDATE_ERROR.getValue()).msg("修改车主信息失败");
            }

        } catch (Exception e) {
            e.printStackTrace();
            log.info("pcUserUpdate系统异常！",e);
            return ProtocolResponse.newInstance().error(ErrorCode.UPDATE_ERROR.getValue()).msg("代码异常，请联系开发人员！");
        }
        log.info("修改PC收银车主信息------>response:{}", response);
        return response;
    }

    /** 
     * @Description: 删除PC收银车主信息
     * @Param: [request] 
     * @return: com.fc.protocol.common.message.body.ProtocolResponse 
     * @Author: linpeng
     * @CreateDate: 2019/1/5
     * @Update: linpeng
     * @UpdateDate: 2019/1/5
     */ 
    @ReqCodeMapping(requestClazz = PcUserDeleteRequest.class)
    public ProtocolResponse pcUserDelete(PcUserDeleteRequest request) {
        log.info("删除PC收银车主信息------>request:{}", request);
        ProtocolResponse response=null;
        try {
            //校验参数是否为空
            String validResult = request.paramValidate();
            if(validResult != null ) {
               return response = ProtocolResponse.newInstance().error(ErrorCode.PARAM_DATA.getValue()).msg(validResult);
            }
            log.info("删除PC收银车主信息，pc_user_id:{}",request.getPcUserId());
            PcUser pcUser  = pcUserService.get(request.getPcUserId());
            //先查询该用户是否存在
            if (pcUser == null) {
                return ProtocolResponse.newInstance().error(ErrorCode.DATE_NOR_DEFIND.getValue()).msg("该车主信息不存在");
            }
            //用户存在，执行后续操作
            log.info("需要被删除的信息:{}", pcUser);
            Map<String, Object> resultStatus = pcUserService.deletePcUser(pcUser.getPcUserId());
            if (resultStatus.isEmpty()) {
                log.info("删除PC收银车主信息成功");
                response = ProtocolResponse.newInstance().success().msg("删除PC收银车主信息成功");
            }
            else{
                return ProtocolResponse.newInstance().error(ErrorCode.DELETE_ERROR.getValue()).msg("删除PC收银车主信息失败");
            }
        } catch (Exception e) {
            e.printStackTrace();
            log.info("pcUserDelete系统异常！",e);
            return ProtocolResponse.newInstance().error(ErrorCode.DELETE_ERROR.getValue()).msg("代码异常，请联系开发人员！");
        }
        log.info("删除PC收银车主信息------>response:{}", response);
        return response;
    }
}
