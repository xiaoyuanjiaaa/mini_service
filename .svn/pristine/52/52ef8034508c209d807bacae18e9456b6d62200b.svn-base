package com.fc.protocol.client.demo.controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.fc.protocol.client.IProtocolClient;
import com.fc.protocol.client.demo.config.ProtocolClientPool;
import com.fc.protocol.common.message.body.ProtocolResponse;
import com.fc.protocol.demo.request.store.user.StoreFollowCreateRequest;
import com.fc.protocol.demo.request.store.user.StoreFollowDeleteRequest;
import com.fc.protocol.demo.request.store.user.StoreFollowListRequest;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

/**
 * 门店关注店铺
 * @author wangq
 * @date  2019/1/8
 */

@Api(tags = "StoreFollowController", description = "门店关注")
@RestController
@RequestMapping("/store/user")
public class StoreFollowController {

	private static Logger log = LoggerFactory.getLogger(StoreFollowController.class);

	@Autowired
	private ProtocolClientPool protocolClientPool;

	@RequestMapping(value = "/storeFollowList", method = { RequestMethod.POST, RequestMethod.GET })
	@ApiOperation(value = "查询门店关注列表", notes = "查询门店关注列表")
	@ResponseBody
	public Object storeFollowList(HttpServletRequest request, HttpServletResponse response,
			StoreFollowListRequest followRequest) throws Exception {
		log.info("storeFollowList----->request:{}", followRequest);
		log.info("protocolClientPool--->null?--->{}", (protocolClientPool == null));
		IProtocolClient userClient = protocolClientPool.userClient();
		log.info("userClient--->null?--->{}" + (userClient == null));
		ProtocolResponse followResponse = protocolClientPool.userClient().sendAndReceived(followRequest);
		log.info("storeFollowList---------->response:{}", followResponse);
		return followResponse;

	}

	/**
	 * 新增门店关注
	 * @param request
	 * @param response
	 * @param followRequest
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/storeFollowCreate", method = { RequestMethod.POST, RequestMethod.GET })
	@ApiOperation(value = "新增门店关注", notes = "新增门店关注")
	@ResponseBody
	public Object storeFollowCreate(HttpServletRequest request, HttpServletResponse response,
			StoreFollowCreateRequest followRequest) throws Exception {
		log.info("storeFollowCreate------->request:{}", followRequest);
		log.info("protocolClientPoll--->null?--->{}", (protocolClientPool == null));
		IProtocolClient userClient = protocolClientPool.userClient();
		log.info("userClient--->null?--->{}" + (userClient == null));
		ProtocolResponse followResponse = protocolClientPool.userClient().sendAndReceived(followRequest);
		log.info("storeFollowCreate---------->response:{}", followResponse);
		return followResponse;
	}

	/**
	 * 取消门店关注
	 * @param request
	 * @param response
	 * @param followRequest
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/storeFollowDelete", method = { RequestMethod.POST, RequestMethod.GET })
	@ApiOperation(value = "取消门店关注", notes = "取消门店关注")
	@ResponseBody
	public Object storeFollowDelete(HttpServletRequest request, HttpServletResponse response,
			StoreFollowDeleteRequest followRequest) throws Exception {
		log.info("storeFollowDelete------------>request:{}", followRequest);
		log.info("protocolClientPoll--->null?---?{}", (protocolClientPool == null));
		IProtocolClient userClient = protocolClientPool.userClient();
		log.info("userClient--->null?--->{}" + (userClient == null));
		ProtocolResponse followResponse = protocolClientPool.userClient().sendAndReceived(followRequest);
		log.info("storeFollowDelete-------->response:{}", followResponse);
		return followResponse;

	}

}
