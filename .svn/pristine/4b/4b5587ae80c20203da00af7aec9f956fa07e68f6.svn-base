package com.fc.protocol.client.demo.controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.fc.protocol.client.IProtocolClient;
import com.fc.protocol.client.demo.config.ProtocolClientPool;
import com.fc.protocol.common.message.body.ProtocolResponse;
import com.fc.protocol.demo.request.wechatmaintain.user.WechatMaintainUserRequest;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

@Api(tags = "WechatMaintainUserController", description = "微养车用户控制器")
@RestController
@RequestMapping("/api/wechatMaintainUser")
public class WechatMaintainUserController {

	private static Logger log = LoggerFactory.getLogger(ApiTestController.class);

	@Autowired
	private ProtocolClientPool protocolClientPool;

	/**
	 * 查询微养车用户列表
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/wechatMaintainUserList", method = { RequestMethod.POST, RequestMethod.GET })
	@ApiOperation(value = "wechatMaintainUserList", notes = "查询微养车用户列表")
	@ResponseBody
	public Object wechatMaintainUserList(HttpServletRequest request, HttpServletResponse response,
			WechatMaintainUserRequest userRequest) throws Exception {
		userRequest.setReqCode("wechatMaintainUserList");
		log.info("wechatMaintainUserList-request:{}", userRequest);
		log.info("protocolClientPool==null?===>{}", (protocolClientPool == null));
		IProtocolClient userClient = protocolClientPool.userClient();
		log.info("userClient==null?===>{}", (userClient == null));
		ProtocolResponse echoResponse = protocolClientPool.userClient().sendAndReceived(userRequest);
		log.info("wechatMaintainUserList-response:{}", echoResponse);
		return echoResponse;
	}

	/**
	 * 查询微养车用户详情
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/wechatMaintainUserDetails", method = { RequestMethod.POST, RequestMethod.GET })
	@ApiOperation(value = "wechatMaintainUserDetails", notes = "查询微养车用户详情")
	@ResponseBody
	public Object wechatMaintainUserInfo(HttpServletRequest request, HttpServletResponse response,
			WechatMaintainUserRequest userRequest) throws Exception {
		userRequest.setReqCode("wechatMaintainUserDetails");
		log.info("wechatMaintainUserInfo-request:{}", userRequest);
		log.info("protocolClientPool==null?===>{}", (protocolClientPool == null));
		IProtocolClient userClient = protocolClientPool.userClient();
		log.info("userClient==null?===>{}", (userClient == null));
		ProtocolResponse echoResponse = protocolClientPool.userClient().sendAndReceived(userRequest);
		log.info("wechatMaintainUserInfo-response:{}", echoResponse);
		return echoResponse;
	}

	/**
	 * 根据openid查询微养车用户信息
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/wechatMaintainUserByOpenId", method = { RequestMethod.POST, RequestMethod.GET })
	@ApiOperation(value = "wechatMaintainUserByOpenId", notes = "根据openid查询微养车用户信息")
	@ResponseBody
	public Object wechatMaintainUserByOpenId(HttpServletRequest request, HttpServletResponse response,
			WechatMaintainUserRequest userRequest) throws Exception {
		userRequest.setReqCode("wechatMaintainUserByOpenId");
		log.info("wechatMaintainUserByOpenId-request:{}", userRequest);
		log.info("protocolClientPool==null?===>{}", (protocolClientPool == null));
		IProtocolClient userClient = protocolClientPool.userClient();
		log.info("userClient==null?===>{}", (userClient == null));
		ProtocolResponse echoResponse = protocolClientPool.userClient().sendAndReceived(userRequest);
		log.info("wechatMaintainUserByOpenId-response:{}", echoResponse);
		return echoResponse;
	}

	/**
	 * 根据unionid查询微养车用户信息
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/wechatMaintainUserByUnionId", method = { RequestMethod.POST, RequestMethod.GET })
	@ApiOperation(value = "wechatMaintainUserByUnionId", notes = "根据unionid查询微养车用户信息")
	@ResponseBody
	public Object wechatMaintainUserByUnionId(HttpServletRequest request, HttpServletResponse response,
			WechatMaintainUserRequest userRequest) throws Exception {
		userRequest.setReqCode("wechatMaintainUserByUnionId");
		log.info("wechatMaintainUserByUnionId-request:{}", userRequest);
		log.info("protocolClientPool==null?===>{}", (protocolClientPool == null));
		IProtocolClient userClient = protocolClientPool.userClient();
		log.info("userClient==null?===>{}", (userClient == null));
		ProtocolResponse echoResponse = protocolClientPool.userClient().sendAndReceived(userRequest);
		log.info("wechatMaintainUserByUnionId-response:{}", echoResponse);
		return echoResponse;
	}

	/**
	 * 根据手机号查询用户信息
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/wechatMaintainUserByMobile", method = { RequestMethod.POST, RequestMethod.GET })
	@ApiOperation(value = "wechatMaintainUserByMobile", notes = "根据手机号查询用户信息")
	@ResponseBody
	public Object wechatMaintainUserByMobile(HttpServletRequest request, HttpServletResponse response,
			WechatMaintainUserRequest userRequest) throws Exception {
		userRequest.setReqCode("wechatMaintainUserByMobile");
		log.info("wechatMaintainUserByMobile-request:{}", userRequest);
		log.info("protocolClientPool==null?===>{}", (protocolClientPool == null));
		IProtocolClient userClient = protocolClientPool.userClient();
		log.info("userClient==null?===>{}", (userClient == null));
		ProtocolResponse echoResponse = protocolClientPool.userClient().sendAndReceived(userRequest);
		log.info("wechatMaintainUserByMobile-response:{}", echoResponse);
		return echoResponse;
	}

	/**
	 * 创建用户信息
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/wechatMaintainUserCreate", method = { RequestMethod.POST, RequestMethod.GET })
	@ApiOperation(value = "wechatMaintainUserCreate", notes = "创建用户信息")
	@ResponseBody
	public Object wechatMaintainUserCreate(HttpServletRequest request, HttpServletResponse response,
			WechatMaintainUserRequest userRequest) throws Exception {
		userRequest.setReqCode("wechatMaintainUserCreate");
		log.info("wechatMaintainUserCreate-request:{}", userRequest);
		log.info("protocolClientPool==null?===>{}", (protocolClientPool == null));
		IProtocolClient userClient = protocolClientPool.userClient();
		log.info("userClient==null?===>{}", (userClient == null));
		ProtocolResponse echoResponse = protocolClientPool.userClient().sendAndReceived(userRequest);
		log.info("wechatMaintainUserCreate-response:{}", echoResponse);
		return echoResponse;
	}

	/**
	 * 修改用户信息、完善用户信息、修改手机号、绑定手机号
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/wechatMaintainUserEditSave", method = { RequestMethod.POST, RequestMethod.GET })
	@ApiOperation(value = "wechatMaintainUserEditSave", notes = "修改用户信息、完善用户信息、修改手机号、绑定手机号")
	@ResponseBody
	public Object wechatMaintainUserEditSave(HttpServletRequest request, HttpServletResponse response,
			WechatMaintainUserRequest userRequest) throws Exception {
		userRequest.setReqCode("wechatMaintainUserEditSave");
		log.info("wechatMaintainUserCreate-request:{}", userRequest);
		log.info("protocolClientPool==null?===>{}", (protocolClientPool == null));
		IProtocolClient userClient = protocolClientPool.userClient();
		log.info("userClient==null?===>{}", (userClient == null));
		ProtocolResponse echoResponse = protocolClientPool.userClient().sendAndReceived(userRequest);
		log.info("wechatMaintainUserCreate-response:{}", echoResponse);
		return echoResponse;
	}
}
