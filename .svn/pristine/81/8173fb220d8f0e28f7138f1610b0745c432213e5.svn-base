package com.fc.member.wechatplatform.user.handler;

import com.fc.common.exception.ErrorCode;
import com.fc.common.plugin.mybatis.Page;
import com.fc.member.wechatplatform.user.entity.WechatPlatformUser;
import com.fc.member.wechatplatform.user.service.IWechatPlatformUserService;
import com.fc.protocol.common.message.body.ProtocolResponse;
import com.fc.protocol.demo.request.wechatplatform.user.*;
import com.fc.protocol.server.handler.Handler;
import com.fc.protocol.server.handler.ReqCodeMapping;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.Map;

/**微养车找店 - 用户管理
 * @Author: linpeng
 * @Date: 2019/1/3 18:41
 * @Version 1.0
 */
@Component
@Handler(module = "wechatplatform")
public class WechatPlatformUserHandler {

	private static Logger log = LoggerFactory.getLogger(WechatPlatformUserHandler.class);
	
	@Autowired
	IWechatPlatformUserService wechatPlatformUserService;


	/**
	 * @Description: 查询微养车找店用户
	 * @Param: [request]
	 * @return: com.fc.protocol.common.message.body.ProtocolResponse
	 * @Author: linpeng
	 * @CreateDate: 2019/1/5
	 * @Update: linpeng
	 * @UpdateDate: 2019/1/5
	 */
    @ReqCodeMapping(requestClazz = WpUserGetRequest.class)
	public ProtocolResponse wpUserGet(WpUserGetRequest request) {
		log.info("获取用户信息详情------>request:{}", request);
		ProtocolResponse response=null;
		try {
            //校验参数是否为空
            String validResult = request.paramValidate();
            if(validResult != null ) {
               return response = ProtocolResponse.newInstance().error(ErrorCode.PARAM_DATA.getValue()).msg(validResult);
            }
			log.info("查询微养车找店用户详情，openid:{}",request.getOpenid());
			WechatPlatformUser wechatPlatformUser  = wechatPlatformUserService.getByOpenid(request.getOpenid());
			log.info("查询结果:{}", wechatPlatformUser);

			if ( wechatPlatformUser != null){
			    response = ProtocolResponse.newInstance().success().addData("wechatPlatformUser",wechatPlatformUser);
			}
			else {
			    response = ProtocolResponse.newInstance().error(ErrorCode.DATE_NOR_DEFIND.getValue()).msg("该用户不存在");
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.info("wechatPlatformUserGet系统异常！",e);
			return ProtocolResponse.newInstance().error(ErrorCode.QUERY_ERROR.getValue()).msg("代码异常，请联系开发人员！");
		}
		log.info("获取用户信息详情------>response:{}", response);
		return response;
	}

	/**
	 * @Description: 查询用户管理列表
	 * @Param: [request]
	 * @return: com.fc.protocol.common.message.body.ProtocolResponse
	 * @Author: linpeng
	 * @CreateDate: 2019/1/5
	 * @Update: linpeng
	 * @UpdateDate: 2019/1/5
	 */
    @ReqCodeMapping(requestClazz = WpUserListRequest.class)
    public ProtocolResponse wpUserList(WpUserListRequest request) {
        log.info("获取用户管理列表------>request:{}", request);
        ProtocolResponse response=null;
        try {
            //校验参数是否为空
            String validResult = request.paramValidate();
            if(validResult != null ) {
               return response = ProtocolResponse.newInstance().error(ErrorCode.PARAM_DATA.getValue()).msg(validResult);
            }
            Page page = new Page();
            page.setPage(request.getPage());
            page.setRows(request.getPagesize());
            log.info("查询用户管理列表，page:{}",page);
            List<WechatPlatformUser> wechatPlatformUserList  = wechatPlatformUserService.getList(request,page);

                       log.info("查询结果 -----> count:{},data:{}", page.getTotalResult(),wechatPlatformUserList);
            if ( wechatPlatformUserList != null & wechatPlatformUserList.size() != 0){
                response = ProtocolResponse.newInstance().success().addData("wechatPlatformUserList",wechatPlatformUserList).addData("count",page.getTotalResult());
            }
            else {
                response = ProtocolResponse.newInstance().error(ErrorCode.DATE_NOR_DEFIND.getValue()).msg("未查到相关的用户管理列表");
            }
        } catch (Exception e) {
            e.printStackTrace();
            log.info("wechatPlatformUserList系统异常！",e);
            return ProtocolResponse.newInstance().error(ErrorCode.QUERY_ERROR.getValue()).msg("代码异常，请联系开发人员！");
        }
        log.info("获取用户管理列表------>response:{}", response);
        return response;
    }


    /**
     * @Description: 创建微养车找店用户
     * @Param: [request]
     * @return: com.fc.protocol.common.message.body.ProtocolResponse
     * @Author: linpeng
     * @CreateDate: 2019/1/5
     * @Update: linpeng
     * @UpdateDate: 2019/1/5
     */
    @ReqCodeMapping(requestClazz = WpUserSaveRequest.class)
	public ProtocolResponse wpUserSave(WpUserSaveRequest request) {
		log.info("创建用户------>request:{}", request);
		ProtocolResponse response=null;
		try {
            //校验参数是否为空
            String validResult = request.paramValidate();
            if(validResult != null ) {
               return response = ProtocolResponse.newInstance().error(ErrorCode.PARAM_DATA.getValue()).msg(validResult);
            }
			log.info("创建微养车找店用户，openID:{}", request.getOpenid());
			Map<String, Object> resultStatus = wechatPlatformUserService.insertPlatformUser(request);
			if (resultStatus.isEmpty()) {
                log.info("创建用户成功");
                response = ProtocolResponse.newInstance().success().msg("创建用户成功");
            }
            else{
                return ProtocolResponse.newInstance().error(ErrorCode.CREATE_ERROR.getValue()).msg("创建用户失败");
            }
		} catch (Exception e) {
			e.printStackTrace();
			log.info("wechatPlatformUserSave系统异常！",e);
			return ProtocolResponse.newInstance().error(ErrorCode.CREATE_ERROR.getValue()).msg("代码异常，请联系开发人员！");
		}
		log.info("创建用户------>response:{}", response);
		return response;
	}

	/**
	 * @Description: 修改微养车找店用户信息
	 * @Param: [request]
	 * @return: com.fc.protocol.common.message.body.ProtocolResponse
	 * @Author: linpeng
	 * @CreateDate: 2019/1/5
	 * @Update: linpeng
	 * @UpdateDate: 2019/1/5
	 */
    @ReqCodeMapping(requestClazz = WpUserUpdateRequest.class)
    public ProtocolResponse wpUserUpdate(WpUserUpdateRequest request) {
        log.info("修改用户信息------>request:{}", request);
        ProtocolResponse response=null;
        try {
            //校验参数是否为空
            String validResult = request.paramValidate();
            if(validResult != null ) {
               return response = ProtocolResponse.newInstance().error(ErrorCode.PARAM_DATA.getValue()).msg(validResult);
            }
            log.info("修改微养车找店用户信息，openid:{}", request.getOpenid());
            WechatPlatformUser wechatPlatformUser  = wechatPlatformUserService.getByOpenid(request.getOpenid());
            //先查询该用户是否存在
            if (wechatPlatformUser == null) {
                return ProtocolResponse.newInstance().error(ErrorCode.DATE_NOR_DEFIND.getValue()).msg("该用户不存在");
            }
            //用户存在，执行后续操作
            log.info("修改前:{}", wechatPlatformUser);
            Map<String, Object> resultStatus = wechatPlatformUserService.updatePlatformUser(request);
            if (resultStatus.isEmpty()) {
                log.info("修改用户信息成功");
                log.info("修改后:{}", wechatPlatformUserService.getByOpenid(request.getOpenid()));
                response = ProtocolResponse.newInstance().success().msg("修改用户成功");
            }
            else{
                return ProtocolResponse.newInstance().error(ErrorCode.UPDATE_ERROR.getValue()).msg("修改用户信息失败");
            }

        } catch (Exception e) {
            e.printStackTrace();
            log.info("wechatPlatformUserUpdate系统异常！",e);
            return ProtocolResponse.newInstance().error(ErrorCode.UPDATE_ERROR.getValue()).msg("代码异常，请联系开发人员！");
        }
        log.info("修改用户信息------>response:{}", response);
        return response;
    }

   /**
    * @Description: 删除微养车找店用户
    * @Param: [request]
    * @return: com.fc.protocol.common.message.body.ProtocolResponse
    * @Author: linpeng
    * @CreateDate: 2019/1/5
    * @Update: linpeng
    * @UpdateDate: 2019/1/5
    */
    @ReqCodeMapping(requestClazz = WpUserDeleteRequest.class)
    public ProtocolResponse wpUserDelete(WpUserDeleteRequest request) {
        log.info("删除用户------>request:{}", request);
        ProtocolResponse response=null;
        try {
            //校验参数是否为空
            String validResult = request.paramValidate();
            if(validResult != null ) {
               return response = ProtocolResponse.newInstance().error(ErrorCode.PARAM_DATA.getValue()).msg(validResult);
            }
            log.info("删除微养车找店用户，openid:{}", request.getOpenid());
            WechatPlatformUser wechatPlatformUser  = wechatPlatformUserService.getByOpenid(request.getOpenid());
            //先查询该用户是否存在
            if (wechatPlatformUser == null) {
                return ProtocolResponse.newInstance().error(ErrorCode.DATE_NOR_DEFIND.getValue()).msg("该用户不存在");
            }
            //用户存在，执行后续操作
            log.info("需要被删除的信息:{}", wechatPlatformUser);
            Map<String, Object> resultStatus = wechatPlatformUserService.deletePlatformUser(wechatPlatformUser.getPlatformUserId());
            if (resultStatus.isEmpty()) {
                log.info("删除用户信息成功");
                response = ProtocolResponse.newInstance().success().msg("删除用户信息成功");
            }
            else{
                return ProtocolResponse.newInstance().error(ErrorCode.DELETE_ERROR.getValue()).msg("删除用户信息失败");
            }
        } catch (Exception e) {
            e.printStackTrace();
            log.info("wechatPlatformUserDelete系统异常！",e);
            return ProtocolResponse.newInstance().error(ErrorCode.DELETE_ERROR.getValue()).msg("代码异常，请联系开发人员！");
        }
        log.info("删除用户------>response:{}", response);
        return response;
    }
}
