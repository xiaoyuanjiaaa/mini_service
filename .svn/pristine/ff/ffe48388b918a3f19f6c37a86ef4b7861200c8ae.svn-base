package com.fc.protocol.client.demo.controller;

import com.fc.protocol.client.IProtocolClient;
import com.fc.protocol.client.demo.config.ProtocolClientPool;
import com.fc.protocol.common.message.body.ProtocolResponse;
import com.fc.protocol.common.utils.IntegerFactory;
import com.fc.protocol.demo.request.wechatplatform.user.WechatPlatformUserFeedbackRequest;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

@Api(tags = "WechatPlatformFeedbackController", description = "微养车找店用户反馈控制器")
@RestController
@RequestMapping("/service/platform/feedback")
public class WechatPlatformUserFeedbackController {

	private static Logger log = LoggerFactory.getLogger(WechatPlatformUserFeedbackController.class);

	@Autowired
	private ProtocolClientPool protocolClientPool;


    @RequestMapping(value = "/get", method = { RequestMethod.POST, RequestMethod.GET })
    @ApiOperation(value = "查询用户反馈信息", notes = "获取微养车找店的用户反馈信息")
    @ResponseBody
    public Object list(HttpServletRequest request,
                       @ApiParam(name = "feedback_id", value = "用户反馈ID") @RequestParam(required = true) Integer feedback_id,
                       HttpServletResponse response) throws Exception {
        WechatPlatformUserFeedbackRequest wechatPlatformUserFeedbackRequest = new WechatPlatformUserFeedbackRequest();
        wechatPlatformUserFeedbackRequest.setReqCode("wechatPlatformFeedbackGetHandler");
        wechatPlatformUserFeedbackRequest.setTraceId("tid_"+IntegerFactory.getInstance().incrementAndGet());
        wechatPlatformUserFeedbackRequest.setVersion("1.1");
        wechatPlatformUserFeedbackRequest.setFeedback_id(feedback_id);
        //EchoRequest echoRequest = RequestUtil.mockEchoRequest(IntegerFactory.getInstance().incrementAndGet());
        log.info("member-request:{}", wechatPlatformUserFeedbackRequest);
        log.info("protocolClientPool==null?===>{}", (protocolClientPool == null));
        IProtocolClient memberClient = protocolClientPool.memberClient();
        log.info("memberClient==null?===>{}", (memberClient == null));
        ProtocolResponse userResponse = protocolClientPool.memberClient().sendAndReceived(wechatPlatformUserFeedbackRequest);
        log.info("member-response:{}", userResponse);
        return userResponse;
    }

	@RequestMapping(value = "/list", method = { RequestMethod.POST, RequestMethod.GET })
	@ApiOperation(value = "查询用户反馈列表", notes = "获取微养车找店的用户反馈列表")
	@ResponseBody
	public Object list(HttpServletRequest request,
                       @ApiParam(name = "openid", value = "openid") @RequestParam(required = false) String openid,
                       @ApiParam(name = "feedback_content", value = "反馈内容") @RequestParam(required = false) String feedback_content,
                       @ApiParam(name = "page", value = "page 当前页码") @RequestParam(required = true, value = "page") Integer page,
                       @ApiParam(name = "pagesize", value = "pagesize 当前页记录数") @RequestParam(required = true, value = "pagesize") Integer pagesize,
                       HttpServletResponse response) throws Exception {
		WechatPlatformUserFeedbackRequest wechatPlatformUserFeedbackRequest = new WechatPlatformUserFeedbackRequest();
		wechatPlatformUserFeedbackRequest.setReqCode("wechatPlatformFeedbackListHandler");
		wechatPlatformUserFeedbackRequest.setTraceId("tid_"+IntegerFactory.getInstance().incrementAndGet());
		wechatPlatformUserFeedbackRequest.setVersion("1.1");
		wechatPlatformUserFeedbackRequest.setOpenid(openid);
		wechatPlatformUserFeedbackRequest.setFeedback_content(feedback_content);
		wechatPlatformUserFeedbackRequest.setPage(page);
		wechatPlatformUserFeedbackRequest.setPagesize(pagesize);
		log.info("member-request:{}", wechatPlatformUserFeedbackRequest);
		log.info("protocolClientPool==null?===>{}", (protocolClientPool == null));
		IProtocolClient memberClient = protocolClientPool.memberClient();
		log.info("memberClient==null?===>{}", (memberClient == null));
		ProtocolResponse userResponse = protocolClientPool.memberClient().sendAndReceived(wechatPlatformUserFeedbackRequest);
		log.info("member-response:{}", userResponse);
		return userResponse;
	}

	@RequestMapping(value = "/save", method = { RequestMethod.POST, RequestMethod.GET })
	@ApiOperation(value = "新建用户反馈信息", notes = "新建微养车找店的用户反馈信息")
	@ResponseBody
	public Object save(HttpServletRequest request,
					     @ApiParam(name = "openid", value = "openid") @RequestParam(required = true) String openid,
					     @ApiParam(name = "feedback_content", value = "反馈内容") @RequestParam(required = false) String feedback_content,
					   HttpServletResponse response) throws Exception {
		WechatPlatformUserFeedbackRequest wechatPlatformUserFeedbackRequest = new WechatPlatformUserFeedbackRequest();
		wechatPlatformUserFeedbackRequest.setReqCode("wechatPlatformFeedbackSaveHandler");
		wechatPlatformUserFeedbackRequest.setTraceId("tid_"+IntegerFactory.getInstance().incrementAndGet());
		wechatPlatformUserFeedbackRequest.setVersion("1.1");
		wechatPlatformUserFeedbackRequest.setOpenid(openid);
		wechatPlatformUserFeedbackRequest.setFeedback_content(feedback_content);
		log.info("member-request:{}", wechatPlatformUserFeedbackRequest);
		log.info("protocolClientPool==null?===>{}", (protocolClientPool == null));
		IProtocolClient memberClient = protocolClientPool.memberClient();
		log.info("memberClient==null?===>{}", (memberClient == null));
		ProtocolResponse userResponse = protocolClientPool.memberClient().sendAndReceived(wechatPlatformUserFeedbackRequest);
		log.info("member-response:{}", userResponse);
		return userResponse;
	}

    @RequestMapping(value = "/update", method = { RequestMethod.POST, RequestMethod.GET })
    @ApiOperation(value = "修改用户反馈信息", notes = "修改微养车找店的用户反馈信息")
    @ResponseBody
    public Object update(HttpServletRequest request,
                         @ApiParam(name = "feedback_id", value = "用户反馈ID") @RequestParam(required = true) Integer feedback_id,
                         @ApiParam(name = "openid", value = "openid") @RequestParam(required = true) String openid,
                         @ApiParam(name = "feedback_content", value = "反馈内容") @RequestParam(required = false) String feedback_content,
                       HttpServletResponse response) throws Exception {
        WechatPlatformUserFeedbackRequest wechatPlatformUserFeedbackRequest = new WechatPlatformUserFeedbackRequest();
        wechatPlatformUserFeedbackRequest.setReqCode("wechatPlatformFeedbackUpdateHandler");
        wechatPlatformUserFeedbackRequest.setTraceId("tid_"+IntegerFactory.getInstance().incrementAndGet());
        wechatPlatformUserFeedbackRequest.setVersion("1.1");
        wechatPlatformUserFeedbackRequest.setFeedback_id(feedback_id);
        wechatPlatformUserFeedbackRequest.setOpenid(openid);
        wechatPlatformUserFeedbackRequest.setFeedback_content(feedback_content);
        log.info("member-request:{}", wechatPlatformUserFeedbackRequest);
        log.info("protocolClientPool==null?===>{}", (protocolClientPool == null));
        IProtocolClient memberClient = protocolClientPool.memberClient();
        log.info("memberClient==null?===>{}", (memberClient == null));
        ProtocolResponse userResponse = protocolClientPool.memberClient().sendAndReceived(wechatPlatformUserFeedbackRequest);
        log.info("member-response:{}", userResponse);
        return userResponse;
    }

    @RequestMapping(value = "/delete", method = { RequestMethod.POST, RequestMethod.GET })
    @ApiOperation(value = "删除用户反馈信息", notes = "删除微养车找店的用户反馈信息")
    @ResponseBody
    public Object delete(HttpServletRequest request,
                         @ApiParam(name = "feedback_id", value = "用户反馈ID") @RequestParam(required = true) Integer feedback_id,
                         @ApiParam(name = "openid", value = "openid") @RequestParam(required = true) String openid,
                         @ApiParam(name = "feedback_content", value = "反馈内容") @RequestParam(required = false) String feedback_content,
                         HttpServletResponse response) throws Exception {
        WechatPlatformUserFeedbackRequest wechatPlatformUserFeedbackRequest = new WechatPlatformUserFeedbackRequest();
        wechatPlatformUserFeedbackRequest.setReqCode("wechatPlatformFeedbackDeleteHandler");
        wechatPlatformUserFeedbackRequest.setTraceId("tid_"+IntegerFactory.getInstance().incrementAndGet());
        wechatPlatformUserFeedbackRequest.setFeedback_id(feedback_id);
        wechatPlatformUserFeedbackRequest.setOpenid(openid);
        wechatPlatformUserFeedbackRequest.setFeedback_content(feedback_content);
        log.info("member-request:{}", wechatPlatformUserFeedbackRequest);
        log.info("protocolClientPool==null?===>{}", (protocolClientPool == null));
        IProtocolClient memberClient = protocolClientPool.memberClient();
        log.info("memberClient==null?===>{}", (memberClient == null));
        ProtocolResponse userResponse = protocolClientPool.memberClient().sendAndReceived(wechatPlatformUserFeedbackRequest);
        log.info("member-response:{}", userResponse);
        return userResponse;
    }
}
