package com.fc.common.util;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * 日期时间工具类
 * 
 * @author laiqhe
 * 
 */
public class DateTimeUtils {

	/**
	 * yyyy-MM-dd 格式字符串常量
	 */
	public final static String FORMAT_DATE = "yyyy-MM-dd";

	public final static String FORMAT_DATE_TIME_SECOND = "yyyy-MM-dd HH:mm";
	/**
	 * hh:mm 格式字符串常量
	 */
	public final static String FORMAT_TIME = "hh:mm";
	/**
	 * yyyy-MM-dd hh:mm:ss 12小时制 格式字符串常量
	 */
	public final static String FORMAT_DATE_TIME = "yyyy-MM-dd hh:mm:ss";

	/**
	 * yyyy-MM-dd HH:mm:ss 24小时制 格式字符串常量
	 */
	public final static String FORMAT_DATE_TIME_24HOURS = "yyyy-MM-dd HH:mm:ss";
	/**
	 * MM月dd日 hh:mm 格式字符串常量
	 */
	public final static String FORMAT_MONTH_DAY_TIME = "MM月dd日 hh:mm";

	public static final String WEEKF = "weekF";// 周开始
	public static final String WEEKL = "weekL";// 周结束
	public static final String TODAYF = "todayF";// 当前天起点
	public static final String TODAYL = "todayL";// 当天结束
	public static final String MONTHF = "monthF";// 月开始
	public static final String MONTHL = "monthL";// 月结束

	private static final int YEAR = 365 * 24 * 60 * 60;// 年
	private static final int MONTH = 30 * 24 * 60 * 60;// 月
	private static final int DAY = 24 * 60 * 60;// 天
	private static final int HOUR = 60 * 60;// 小时
	private static final int MINUTE = 60;// 分钟

	private static final SimpleDateFormat sf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

	/**
	 * 获取当前时间 10位时间戳
	 * @author yangd
	 * @see update_name:yangd update_time:2019-01-05
	 * @return
	 */
	static public Integer getNow() {
		return (int) (System.currentTimeMillis() / 1000);
	}

	/**
	 * 根据时间戳获取描述性时间，如3分钟前，1天前
	 * 
	 * @param timestamp
	 *            时间戳 单位为毫秒
	 * @return String 时间字符串
	 */
	public static String getDescriptionTimeFromTimestamp(long timestamp) throws Exception {
		long currentTime = System.currentTimeMillis();
		long timeGap = (currentTime - timestamp) / 1000;// 与现在时间相差秒数
		String timeStr = null;
		if (timeGap > YEAR) {
			timeStr = timeGap / YEAR + "年前";
		} else if (timeGap > MONTH) {
			timeStr = timeGap / MONTH + "个月前";
		} else if (timeGap > DAY) {// 1天以上
			timeStr = timeGap / DAY + "天前";
		} else if (timeGap > HOUR) {// 1小时-24小时
			timeStr = timeGap / HOUR + "小时前";
		} else if (timeGap > MINUTE) {// 1分钟-59分钟
			timeStr = timeGap / MINUTE + "分钟前";
		} else {// 1秒钟-59秒钟
			timeStr = "刚刚";
		}
		return timeStr;
	}

	/**
	 * 根据时间戳获取指定格式的时间，如2011-11-30 08:40
	 * 
	 * @param timestamp
	 *            时间戳 单位为毫秒
	 * @param format
	 *            指定格式 如果为null或空串则使用默认格式"yyyy-MM-dd HH:MM"
	 * @return String 时间字符串
	 */
	public static String getFormatTimeFromTimestamp(long timestamp, String format) throws Exception {
		SimpleDateFormat sdf = new SimpleDateFormat();
		if (format == null || format.trim().equals("")) {
			sdf.applyPattern(FORMAT_DATE);
			int currentYear = Calendar.getInstance().get(Calendar.YEAR);
			int year = Integer.parseInt(sdf.format(new Date(timestamp)).substring(0, 4));
			if (currentYear == year) {// 如果为今年则不显示年份
				sdf.applyPattern(FORMAT_MONTH_DAY_TIME);
			} else {
				sdf.applyPattern(FORMAT_DATE_TIME);
			}
		} else {
			sdf.applyPattern(format);
		}
		Date date = new Date(timestamp);
		return sdf.format(date);
	}

	/**
	 * 根据时间戳获取时间字符串，并根据指定的时间分割数partionSeconds来自动判断返回描述性时间还是指定格式的时间
	 * 
	 * @param timestamp
	 *            时间戳 单位是毫秒
	 * @param partionSeconds
	 *            时间分割线，当现在时间与指定的时间戳的秒数差大于这个分割线时则返回指定格式时间，否则返回描述性时间
	 * @param format
	 * @return String 时间字符串
	 */
	public static String getMixTimeFromTimestamp(long timestamp, long partionSeconds, String format) throws Exception {
		long currentTime = System.currentTimeMillis();
		long timeGap = (currentTime - timestamp) / 1000;// 与现在时间相差秒数
		if (timeGap <= partionSeconds) {
			return getDescriptionTimeFromTimestamp(timestamp);
		} else {
			return getFormatTimeFromTimestamp(timestamp, format);
		}
	}

	/**
	 * 获取当前日期的指定格式的字符串
	 * 
	 * @param format
	 *            指定的日期时间格式，若为null或""则使用指定的格式"yyyy-MM-dd HH:MM"
	 * @return String 时间字符串
	 */
	public static String getCurrentTime(String format) {
		SimpleDateFormat sdf = new SimpleDateFormat();
		if (format == null || format.trim().equals("")) {
			sdf.applyPattern(FORMAT_DATE_TIME);
		} else {
			sdf.applyPattern(format);
		}
		return sdf.format(new Date());
	}

	/**
	 * 将日期字符串以指定格式转换为Date
	 * 
	 * @param timeStr
	 *            日期字符串
	 * @param format
	 *            指定的日期格式，若为null或""则使用指定的格式"yyyy-MM-dd HH:MM"
	 * @return String 时间字符串
	 */
	public static Date getTimeFromString(String timeStr, String format) {
		SimpleDateFormat sdf = new SimpleDateFormat();
		if (format == null || format.trim().equals("")) {
			sdf.applyPattern(FORMAT_DATE_TIME);
		} else {
			sdf.applyPattern(format);
		}
		try {
			return sdf.parse(timeStr);
		} catch (ParseException e) {
			return null;
		}
	}

	/**
	 * @description 获取当天指定时间 
	 */
	public static Date getCurrentDay(int hour, int minute) {
		Calendar calendar = Calendar.getInstance();
		calendar.set(calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH), calendar.get(Calendar.DAY_OF_MONTH),
				hour, minute, 0);
		return calendar.getTime();
	}

	/**
	 * 将Date以指定格式转换为日期时间字符串
	 * 
	 * @param time
	 *            日期
	 * @param format
	 *            指定的日期时间格式，若为null或""则使用指定的格式"yyyy-MM-dd HH:MM"
	 * @return String 时间字符串
	 */
	public static String getStringFromTime(Date time, String format) {
		SimpleDateFormat sdf = new SimpleDateFormat();
		if (format == null || format.trim().equals("")) {
			sdf.applyPattern(FORMAT_DATE_TIME);
		} else {
			sdf.applyPattern(format);
		}
		return sdf.format(time);
	}

	public static int getDateTimeInteger(Date date) {
		if (date == null) {
			date = new Date();
		}
		Long time = date.getTime();
		System.out.println("time:" + time);
		Long t = (time / 1000);
		return t.intValue();
	}

	/**
	 * 获取当前时间，10位时间戳；创建时间，更新时间优化使用这个方法
	 * @author xiaozw
	 * @see update_name:yangd update_time:2019-01-08
	 * @return
	 */
	public static int getDateTimeInteger() {
		Long time = System.currentTimeMillis();
		Long t = time / 1000;
		return t.intValue();
	}

	@SuppressWarnings("rawtypes")
	public static Map getWeekDay() {
		Map<String, Date> map = new HashMap<String, Date>();
		Calendar ca = Calendar.getInstance();
		ca.setFirstDayOfWeek(Calendar.MONDAY);
		ca.set(Calendar.DAY_OF_WEEK, Calendar.SUNDAY);
		ca.set(ca.get(Calendar.YEAR), ca.get(Calendar.MONTH), ca.get(Calendar.DATE), 23, 59, 59);
		map.put(WEEKL, ca.getTime());
		ca.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);
		ca.set(Calendar.HOUR_OF_DAY, 0);
		ca.set(Calendar.MINUTE, 0);
		ca.set(Calendar.SECOND, 0);
		map.put(WEEKF, ca.getTime());
		return map;
	}

	@SuppressWarnings("rawtypes")
	public static Map getCurrentDay() {
		Map<String, Date> map = new HashMap<String, Date>();
		Calendar cal = Calendar.getInstance();
		cal.set(cal.get(Calendar.YEAR), cal.get(Calendar.MONTH), cal.get(Calendar.DAY_OF_MONTH), 0, 0, 0);
		map.put(TODAYF, cal.getTime());
		cal.set(Calendar.HOUR_OF_DAY, 23);
		cal.set(Calendar.MINUTE, 59);
		cal.set(Calendar.SECOND, 59);
		map.put(TODAYL, cal.getTime());
		return map;
	}

	@SuppressWarnings("rawtypes")
	public static Map getMonthDate() {
		Map<String, Date> map = new HashMap<String, Date>();
		// 获取Calendar
		Calendar cal = Calendar.getInstance();
		// 设置时间,当前时间不用设置
		cal.set(Calendar.DATE, cal.getActualMinimum(Calendar.DATE));
		cal.set(Calendar.HOUR_OF_DAY, 0);
		cal.set(Calendar.MINUTE, 0);
		cal.set(Calendar.SECOND, 0);
		map.put(MONTHF, cal.getTime());
		// 设置日期为本月最大日期
		cal.set(Calendar.DATE, cal.getActualMaximum(Calendar.DATE));
		cal.set(Calendar.HOUR_OF_DAY, 23);
		cal.set(Calendar.MINUTE, 59);
		cal.set(Calendar.SECOND, 59);
		// 打印
		map.put(MONTHL, cal.getTime());
		return map;
	}

	public static Date getDateStartDay() {
		Calendar cal = Calendar.getInstance();
		cal.set(Calendar.HOUR_OF_DAY, 0);
		cal.set(Calendar.SECOND, 0);
		cal.set(Calendar.MINUTE, 0);
		cal.set(Calendar.MILLISECOND, 0);
		return cal.getTime();
	}

	//获取明天的开始时间
	public static Date getBeginDayOfTomorrow() {
		Calendar cal = Calendar.getInstance();
		cal.setTime(getDateStartDay());
		cal.add(Calendar.DAY_OF_MONTH, 1);
		return cal.getTime();
	}

	public static Date getWeekStartDay() {
		Calendar cal = Calendar.getInstance();
		cal.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);
		cal.set(Calendar.HOUR_OF_DAY, 0);
		cal.set(Calendar.SECOND, 0);
		cal.set(Calendar.MINUTE, 0);
		cal.set(Calendar.MILLISECOND, 0);
		return cal.getTime();
	}

	public static Date getMonthStartDay() {
		Calendar calendar1 = Calendar.getInstance();
		calendar1.set(calendar1.get(Calendar.YEAR), calendar1.get(Calendar.MONTH), 0, 0, 0, 0);
		return calendar1.getTime();
	}

	public static Date getNextMonthStartDay() {
		Calendar cal = Calendar.getInstance();
		cal.set(cal.get(Calendar.YEAR), cal.get(Calendar.MONTH) + 1, 0, 0, 0, 0);
		return cal.getTime();
	}

	/**
	 * 求时间date的n天后的日期
	 * 
	 * @param date
	 * @param count
	 * @return
	 */
	public static Date getNextDateByCount(Date date, int count) {
		Calendar cal = Calendar.getInstance();
		cal.setTime(date);
		cal.add(Calendar.DATE, count);
		return cal.getTime();
	}

	/**
	 * 求当前日期n天后的日期
	 * 
	 * @param count
	 * @return
	 */
	public static Date getNextDateByCount(int count) {
		Calendar cal = Calendar.getInstance();
		cal.add(Calendar.DATE, count);
		return cal.getTime();
	}

	/**
	 * 根式话10位时间
	 * @param timestamp
	 * @param pattern
	 * @return
	 */
	public static String getStrFromTimestamp10(Long timestamp, String pattern) {
		return new SimpleDateFormat(pattern).format(new Date(timestamp * 1000));
	}

	/**
	 * 根式话10位时间
	 * @param timestamp
	 * @param pattern
	 * @return
	 */
	public static String getStrFromTimestamp10(Integer timestamp, String pattern) {
		return getStrFromTimestamp10(timestamp.longValue(), pattern);
	}

	public static Integer getIntegerTimeFromString(String time, String format) {
		return getDateTimeInteger(getTimeFromString(time, format));
	}

	/* 
	* 将时间转换为时间戳 yyyy-MM-dd HH:mm:ss
	*/
	public static String dateToStamp(String s) throws ParseException {
		String res;
		//SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		//SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
		Date date = sf.parse(s);
		long ts = date.getTime() / 1000;
		res = String.valueOf(ts);
		return res;
	}

	/*
	 * 时间戳转时间格式 yyyy-MM-dd HH:mm:ss
	 */
	public static String stamp2ToDate(String s) {
		String res;
		//SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		//SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
		long lt = new Long(s) * 1000;
		Date date = new Date(lt);
		res = sf.format(date);
		return res;
	}

	public static void main(String[] args) {
		//		Date d = DateTimeUtils.getDateStartDay();
		//		System.out.println(DateTimeUtils.getStringFromTime(d, "yyyy-MM-dd HH:mm:ss"));

		//		System.out.println(DateTimeUtils.getWeekDay());

		//		Calendar cal = Calendar.getInstance();
		////		cal.set(2016, 10, 12, 14, 30);
		//		System.err.println(cal.get(Calendar.DAY_OF_WEEK));
		//		System.err.println(DateTimeUtils.getStrFromTimestamp10(1467533021l, DateTimeUtils.FORMAT_DATE_TIME_SECOND));
		/*System.err.println(DateTimeUtils.getStrFromTimestamp10(14809348995l, DateTimeUtils.FORMAT_DATE_TIME_SECOND));
		System.err.println(DateTimeUtils.getStrFromTimestamp10(14809348995l, "yyyy-MM-dd hh:mm"));
		System.out.println(DateFormatUtils.format(DateTimeUtils.getDateStartDay(), "yyyy-MM-dd HH:mm:SS"));
		System.out.println(DateFormatUtils.format(DateTimeUtils.getBeginDayOfTomorrow(), "yyyy-MM-dd HH:mm:SS"));*/
		System.out.println(System.currentTimeMillis());
		System.out.println(getDateTimeInteger());

	}

}
