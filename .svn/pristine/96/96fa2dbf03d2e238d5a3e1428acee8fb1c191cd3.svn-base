package com.fc.member.wechatmaintain.user.handler;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.fc.common.util.DataConverHelper;
import com.fc.common.util.DataConverHelper.DataConver;
import com.fc.common.util.DateTimeUtils;
import com.fc.member.wechatmaintain.user.entity.WechatMaintainCouponSstoreUser;
import com.fc.member.wechatmaintain.user.service.IWechatMaintainCouponSstoreUserService;
import com.fc.protocol.common.message.body.ProtocolResponse;
import com.fc.protocol.demo.request.wechatmaintain.user.WechatMaintainCouponSstoreUserRequest;
import com.fc.protocol.server.handler.Handler;
import com.fc.protocol.server.handler.ReqCodeMapping;

/**
 * 微养车用户会员卡
 * @author yangd
 * @date 2019年1月4日
 */
@Component
@Handler(module = "wechatMaintainCouponSstoreUser")
public class WechatMaintainCouponSstoreUserHandler {

	private static Logger log = LoggerFactory.getLogger(WechatMaintainCouponSstoreUserHandler.class);

	@Autowired
	IWechatMaintainCouponSstoreUserService wechatMaintainCouponSstoreUserService;

	/**
	 * 微养车 - 查询会员卡列表
	 * @author yangd
	 * @see update_name:yangd update_time:2019-01-05
	 * @param request
	 * @return
	 */
	@ReqCodeMapping(requestClazz = WechatMaintainCouponSstoreUserRequest.class)
	public ProtocolResponse wechatMaintainCouponSstoreUserList(WechatMaintainCouponSstoreUserRequest request) {
		log.info("时间:{} , wechatMaintainCouponSstoreUserList------>request:{}", DateTimeUtils.getNow(), request);

		ProtocolResponse response = ProtocolResponse.newInstance().success();
		try {
			List<WechatMaintainCouponSstoreUser> userList = wechatMaintainCouponSstoreUserService
					.getWechatMaintainCouponSstoreUserListPage(request);

			// 循环返回前端规定的json格式
			List<Map<String, Object>> dataList = DataConverHelper.forList(userList,
					new DataConver<WechatMaintainCouponSstoreUser>() {
						@Override
						public void conver(Map<String, Object> target, WechatMaintainCouponSstoreUser source)
								throws Exception {
							target.put("wechatMaintainCouponSstoreUserId",
									source.getWechatMaintainCouponSstoreUserId());
							target.put("wechatMaintainUserId", source.getWechatMaintainUserId());
							target.put("storeId", source.getStoreId());
							target.put("integral", source.getIntegral());
							target.put("discount", source.getDiscount());
							target.put("couponLevel", source.getCouponLevel());
							target.put("couponLevelName", source.getCouponLevelName());
							String createTime = source.getCreateTime() == null ? "0"
									: source.getCreateTime().toString();
							target.put("createTime",
									Integer.valueOf(createTime) > 0 ? DateTimeUtils.getStrFromTimestamp10(
											Integer.valueOf(createTime), DateTimeUtils.FORMAT_DATE_TIME_24HOURS) : "");

							String updateTime = source.getUpdateTime() == null ? "0"
									: source.getUpdateTime().toString();
							target.put("updateTime",
									Integer.valueOf(updateTime) > 0 ? DateTimeUtils.getStrFromTimestamp10(
											Integer.valueOf(updateTime), DateTimeUtils.FORMAT_DATE_TIME_24HOURS) : "");
						}
					});
			response.addData("data", dataList);
		} catch (Exception e) {
			log.error(e.getMessage());
			e.printStackTrace();
			response.error(99).msg("代码异常，请联系开发人员！");
		}
		log.info("时间:{} , 返回结果 wechatMaintainCouponSstoreUserList------>response:{}", DateTimeUtils.getNow(), response);
		return response;
	}

	/**
	 * 微养车 - 查询门店会员用户列表
	 * @author yangd
	 * @see update_name:yangd update_time:2019-01-05
	 * @param request
	 * @return
	 */
	@ReqCodeMapping(requestClazz = WechatMaintainCouponSstoreUserRequest.class)
	public ProtocolResponse wechatMaintainCouponSstoreUserByStoreId(WechatMaintainCouponSstoreUserRequest request) {
		log.info("时间:{} , wechatMaintainCouponSstoreUserList------>request:{}", DateTimeUtils.getNow(), request);

		ProtocolResponse response = ProtocolResponse.newInstance().success();
		try {
			//校验参数是否为空
			String validResult = request.paramValidateByStoreId();
			if (validResult != null) {
				return response.error(99).msg(validResult);
			}
			List<WechatMaintainCouponSstoreUser> userList = wechatMaintainCouponSstoreUserService
					.getWechatMaintainCouponSstoreUserByStoreIdList(request);

			// 循环返回前端规定的json格式
			List<Map<String, Object>> dataList = DataConverHelper.forList(userList,
					new DataConver<WechatMaintainCouponSstoreUser>() {
						@Override
						public void conver(Map<String, Object> target, WechatMaintainCouponSstoreUser source)
								throws Exception {
							target.put("wechatMaintainCouponSstoreUserId",
									source.getWechatMaintainCouponSstoreUserId());
							target.put("wechatMaintainUserId", source.getWechatMaintainUserId());
							target.put("storeId", source.getStoreId());
							target.put("integral", source.getIntegral());
							target.put("discount", source.getDiscount());
							target.put("couponLevel", source.getCouponLevel());
							target.put("couponLevelName", source.getCouponLevelName());
							String createTime = source.getCreateTime() == null ? "0"
									: source.getCreateTime().toString();
							target.put("createTime",
									Integer.valueOf(createTime) > 0 ? DateTimeUtils.getStrFromTimestamp10(
											Integer.valueOf(createTime), DateTimeUtils.FORMAT_DATE_TIME_24HOURS) : "");

							String updateTime = source.getUpdateTime() == null ? "0"
									: source.getUpdateTime().toString();
							target.put("updateTime",
									Integer.valueOf(updateTime) > 0 ? DateTimeUtils.getStrFromTimestamp10(
											Integer.valueOf(updateTime), DateTimeUtils.FORMAT_DATE_TIME_24HOURS) : "");
						}
					});
			response.addData("data", dataList);
		} catch (Exception e) {
			log.error(e.getMessage());
			e.printStackTrace();
			response.error(99).msg("代码异常，请联系开发人员！");
		}
		log.info("时间:{} , 返回结果 wechatMaintainCouponSstoreUserList------>response:{}", DateTimeUtils.getNow(), response);
		return response;
	}

	/**
	 * 微养车 - 查询用户在此门店会员卡详细信息
	 * @author yangd
	 * @see update_name:yangd update_time:2019-01-05
	 * @param request
	 * @return
	 */
	@ReqCodeMapping(requestClazz = WechatMaintainCouponSstoreUserRequest.class)
	public ProtocolResponse wechatMaintainCouponSstoreUserByUserId(WechatMaintainCouponSstoreUserRequest request) {
		log.info("时间:{} , wechatMaintainCouponSstoreUserByUserId------>request:{}", DateTimeUtils.getNow(), request);

		ProtocolResponse response = ProtocolResponse.newInstance().success();
		try {
			//校验参数是否为空
			String validResult = request.paramValidateByUserId();
			if (validResult != null) {
				return response.error(99).msg(validResult);
			}

			WechatMaintainCouponSstoreUser couponSstoreUser = wechatMaintainCouponSstoreUserService
					.getCouponStoreByUserIdAndStoreId(request);

			// 循环返回前端规定的json格式
			Map<String, Object> target = new HashMap<String, Object>();
			target.put("wechatMaintainCouponSstoreUserId", couponSstoreUser.getWechatMaintainCouponSstoreUserId());
			target.put("wechatMaintainUserId", couponSstoreUser.getWechatMaintainUserId());
			target.put("storeId", couponSstoreUser.getStoreId());
			target.put("integral", couponSstoreUser.getIntegral());
			target.put("discount", couponSstoreUser.getDiscount());
			target.put("couponLevel", couponSstoreUser.getCouponLevel());
			target.put("couponLevelName", couponSstoreUser.getCouponLevelName());
			String createTime = couponSstoreUser.getCreateTime() == null ? "0"
					: couponSstoreUser.getCreateTime().toString();
			target.put("createTime", Integer.valueOf(createTime) > 0 ? DateTimeUtils
					.getStrFromTimestamp10(Integer.valueOf(createTime), DateTimeUtils.FORMAT_DATE_TIME_24HOURS) : "");

			String updateTime = couponSstoreUser.getUpdateTime() == null ? "0"
					: couponSstoreUser.getUpdateTime().toString();
			target.put("updateTime", Integer.valueOf(updateTime) > 0 ? DateTimeUtils
					.getStrFromTimestamp10(Integer.valueOf(updateTime), DateTimeUtils.FORMAT_DATE_TIME_24HOURS) : "");

			response.addData("data", couponSstoreUser);
		} catch (Exception e) {
			log.error(e.getMessage());
			e.printStackTrace();
			response.error(99).msg("代码异常，请联系开发人员！");
		}
		log.info("时间:{} , 返回结果 wechatMaintainCouponSstoreUserByUserId------>response:{}", DateTimeUtils.getNow(),
				response);
		return response;
	}

	/**
	 * 微养车 - 创建用户会员卡
	 * @author yangd
	 * @see update_name:yangd update_time:2019-01-05
	 * @param request
	 * @return
	 */
	@ReqCodeMapping(requestClazz = WechatMaintainCouponSstoreUserRequest.class)
	public ProtocolResponse wechatMaintainCouponSstoreUserCreate(WechatMaintainCouponSstoreUserRequest request) {
		log.info("时间:{} , 请求参数 wechatMaintainCouponSstoreUserCreate------>request:{}", DateTimeUtils.getNow(), request);
		ProtocolResponse response = ProtocolResponse.newInstance().success();
		try {
			//校验参数是否为空
			String validResult = request.paramValidateCreate();
			if (validResult != null) {
				return response.error(99).msg(validResult);
			}

			Map<String, Object> resultStatus = wechatMaintainCouponSstoreUserService.insertSelective(request);
			log.info("resultStatus------>{}", resultStatus);
			if (resultStatus.isEmpty()) {
				response.msg("创建成功");
			} else {
				response.error(99).msg(resultStatus.get("error").toString());
			}
		} catch (Exception e) {
			log.error(e.getMessage());
			e.printStackTrace();
			response.error(99).msg("代码异常，请联系开发人员！");
		}
		log.info("时间:{} , 返回结果 wechatMaintainCouponSstoreUserCreate------>response:{}", DateTimeUtils.getNow(),
				response);
		return response;
	}

	/**
	 * 微养车 - 更新用户会员卡信息
	 * @author yangd
	 * @see update_name:yangd update_time:2019-01-05
	 * @param request
	 * @return
	 */
	@ReqCodeMapping(requestClazz = WechatMaintainCouponSstoreUserRequest.class)
	public ProtocolResponse wechatMaintainCouponSstoreUserEditSave(WechatMaintainCouponSstoreUserRequest request) {
		log.info("时间:{} , 请求参数 wechatMaintainCouponSstoreUserEditSave------>request:{}", DateTimeUtils.getNow(),
				request);
		ProtocolResponse response = ProtocolResponse.newInstance().success();
		try {
			//校验参数是否为空
			String validResult = request.paramValidateEdit();
			if (validResult != null) {
				return response.error(99).msg(validResult);
			}
			Map<String, Object> resultStatus = wechatMaintainCouponSstoreUserService
					.updateWechatMaintainCouponSstoreUser(request);
			log.info("resultStatus------>{}", resultStatus);
			if (resultStatus.isEmpty()) {
				response.msg("修改成功");
			} else {
				response.error(99).msg(resultStatus.get("error").toString());
			}
		} catch (Exception e) {
			log.error(e.getMessage());
			e.printStackTrace();
			response.error(99).msg("代码异常，请联系开发人员！");
		}
		log.info("时间:{} , 返回结果 wechatMaintainCouponSstoreUserEditSave------>response:{}", DateTimeUtils.getNow(),
				response);
		return response;
	}

}
