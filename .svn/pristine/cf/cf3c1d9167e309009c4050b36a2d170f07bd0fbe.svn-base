package com.fc.member.wechatmaintain.user.service.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.fc.common.exception.ErrorCode;
import com.fc.common.plugin.mybatis.IMapper;
import com.fc.common.plugin.mybatis.Page;
import com.fc.common.plugin.mybatis.PageQuery;
import com.fc.common.service.impl.ServiceImpl;
import com.fc.common.util.DateTimeUtils;
import com.fc.member.wechatmaintain.user.dao.IWechatMaintainConponConsumeinfoDao;
import com.fc.member.wechatmaintain.user.entity.WechatMaintainConponConsumeinfo;
import com.fc.member.wechatmaintain.user.service.IWechatMaintainConponConsumeinfoService;
import com.fc.protocol.demo.request.wechatmaintain.user.WechatMaintainConponConsumeinfoConsumptionCountAndBalanceRequest;
import com.fc.protocol.demo.request.wechatmaintain.user.WechatMaintainConponConsumeinfoCreateRequest;
import com.fc.protocol.demo.request.wechatmaintain.user.WechatMaintainConponConsumeinfoDetailsListRequest;
import com.fc.protocol.demo.request.wechatmaintain.user.WechatMaintainConponConsumeinfoListRequest;
import com.fc.protocol.demo.request.wechatmaintain.user.WechatMaintainConponConsumeinfoOverviewListRequest;
import com.fc.protocol.demo.request.wechatmaintain.user.WechatMaintainConponConsumeinfoStoreTotalAmountBalanceRequest;
import com.fc.protocol.demo.request.wechatmaintain.user.WechatMaintainConponConsumeinfoStoreTotalAmountRequest;

/**
 * <p>Title: WechatMaintainConponConsumeinfo</p>
 * <p>Description: 微养车用户储值卡充值消费记录表 Service 层</p>
 * @author yangd
 * @date 2018-12-28 17:13:46
 */
@Service("wechatMaintainConponConsumeinfoService")
public class WechatMaintainConponConsumeinfoServiceImp extends ServiceImpl<WechatMaintainConponConsumeinfo>
		implements IWechatMaintainConponConsumeinfoService {

	private static Logger log = LoggerFactory.getLogger(WechatMaintainConponConsumeinfoServiceImp.class);

	@Autowired
	private IWechatMaintainConponConsumeinfoDao wechatMaintainConponConsumeinfoDao;

	@Override
	protected IMapper<WechatMaintainConponConsumeinfo> getDao() {
		return wechatMaintainConponConsumeinfoDao;
	}

	/**
	 * 插入数据
	 */
	@Override
	public Map<String, Object> insertSelective(WechatMaintainConponConsumeinfoCreateRequest request) {
		log.info("insertSelective---------->:" + request);
		Map<String, Object> resultMap = new HashMap<>();
		// 将不为空的属性set到对象中
		WechatMaintainConponConsumeinfo entity = isNotEmptySetObjectInsert(request);
		log.info("WechatMaintainConponConsumeinfo---------->:" + entity);
		int result = wechatMaintainConponConsumeinfoDao.insertSelective(entity);
		if (result <= 0) {
			resultMap.put("error", ErrorCode.CREATE_ERROR.getDesc());
			return resultMap;
		}
		return resultMap;
	}

	/**
	 * 储值卡消费记录总表(运营后台-分页,关联门店、微养车用户表查询)
	 */
	@Override
	public List<WechatMaintainConponConsumeinfo> getConponConsumeinfoListPage(Page page,
			WechatMaintainConponConsumeinfoListRequest request) {
		log.info("getWechatMaintainConponConsumeinfoListPage---------->:" + request);
		// set 对象属性值
		WechatMaintainConponConsumeinfo entity = isNotEmptySetObjectListPage(request);
		log.info("WechatMaintainConponConsumeinfo---------->{}", entity.toString());
		// 设置分页，查询条件
		PageQuery pageQuery = new PageQuery();
		pageQuery.setPage(page);
		pageQuery.setCondition(entity);
		return wechatMaintainConponConsumeinfoDao.getRowsPage(pageQuery);
	}

	/**
	 * 储值卡总览表(运营后台-分页,关联门店表查询)
	 */
	@Override
	public List<WechatMaintainConponConsumeinfo> getConponConsumeinfoOverviewListPage(Page page,
			WechatMaintainConponConsumeinfoOverviewListRequest request) {
		log.info("getWechatMaintainConponConsumeinfoListPage---------->:" + request);
		// set 对象属性值
		WechatMaintainConponConsumeinfo entity = new WechatMaintainConponConsumeinfo();
		entity.setStoreId(request.getStoreId());
		entity.setCreateTime(request.getCreateTime());
		log.info("WechatMaintainConponConsumeinfo---------->{}", entity.toString());
		// 设置分页，查询条件
		PageQuery pageQuery = new PageQuery();
		pageQuery.setPage(page);
		pageQuery.setCondition(entity);
		return wechatMaintainConponConsumeinfoDao.getRowsPage(pageQuery);
	}

	/**
	 * 我的 - 储值卡收支详情(查询储值卡使用记录)
	 */
	@Override
	public List<WechatMaintainConponConsumeinfo> getConponConsumeinfoDetailsList(
			WechatMaintainConponConsumeinfoDetailsListRequest request) {
		log.info("getConponConsumeinfoDetailsList---------->:" + request);
		// set 对象属性值
		WechatMaintainConponConsumeinfo entity = new WechatMaintainConponConsumeinfo();
		entity.setFcUserId(request.getFcUserId());
		entity.setStoreId(request.getStoreId());
		log.info("WechatMaintainConponConsumeinfo---------->{}", entity.toString());
		return wechatMaintainConponConsumeinfoDao.getRows(entity);
	}

	/**
	 * 根据store_id查询门店所售储值卡金额
	 */
	@Override
	public Map<String, Object> getStoreTotalAmount(WechatMaintainConponConsumeinfoStoreTotalAmountRequest request) {
		log.info("getStoreTotalAmount---------->:" + request);
		// set 对象属性值
		WechatMaintainConponConsumeinfo entity = new WechatMaintainConponConsumeinfo();
		entity.setStoreId(request.getStoreId());
		log.info("WechatMaintainConponConsumeinfo---------->{}", entity.toString());
		WechatMaintainConponConsumeinfo obj = wechatMaintainConponConsumeinfoDao.getStoreTotalAmount(entity);
		Map<String, Object> resultMap = new HashMap<>();
		if (obj != null) {
			resultMap.put("store_id", request.getStoreId());
			resultMap.put("balance", obj.getBalance());
		} else {
			resultMap.put("store_id", request.getStoreId());
			resultMap.put("balance", 0);
		}
		return resultMap;
	}

	/**
	 * 门店APP储值卡设置显示充值总额、当前总余额
	 */
	@Override
	public Map<String, Object> getStoreTotalAmountBalance(
			WechatMaintainConponConsumeinfoStoreTotalAmountBalanceRequest request) {
		log.info("getStoreTotalAmountBalance---------->:" + request);
		// set 对象属性值
		WechatMaintainConponConsumeinfo entity = new WechatMaintainConponConsumeinfo();
		entity.setStoreId(request.getStoreId());
		log.info("WechatMaintainConponConsumeinfo---------->{}", entity.toString());
		Map<String, Object> resultMap = wechatMaintainConponConsumeinfoDao.getStoreTotalAmountBalance(entity);
		if (resultMap == null) {
			resultMap = new HashMap<String, Object>();
			resultMap.put("store_id", request.getStoreId());
			resultMap.put("recharge_amount", 0);
			resultMap.put("total_balance", 0);
		}
		return resultMap;
	}

	/**
	 * 门店APP客户管理(查询储值卡消费次数、余额)
	 */
	@Override
	public Map<String, Object> getConsumptionCountAndBalance(
			WechatMaintainConponConsumeinfoConsumptionCountAndBalanceRequest request) {
		log.info("getConsumptionCountAndBalance---------->:" + request);
		// set 对象属性值
		WechatMaintainConponConsumeinfo entity = new WechatMaintainConponConsumeinfo();
		entity.setStoreId(request.getStoreId());
		log.info("WechatMaintainConponConsumeinfo---------->{}", entity.toString());
		// TODO 暂时未写SQL
		return null;
	}

	/**
	 * 将不为空的属性set到对象中
	 * @param entity 实体对象
	 * @param request 参数对象
	 * @return
	 */
	public static WechatMaintainConponConsumeinfo isNotEmptySetObjectInsert(
			WechatMaintainConponConsumeinfoCreateRequest request) {
		WechatMaintainConponConsumeinfo entity = new WechatMaintainConponConsumeinfo();
		entity.setFcUserId(request.getFcUserId());
		entity.setOrderNo(request.getOrderNo());
		entity.setStoreId(request.getStoreId());
		entity.setWechatStorePackageId(request.getWechatStorePackageId());
		entity.setRecordType(request.getRecordType());
		entity.setCostFee(request.getCostFee());
		entity.setDiscount(request.getDiscount());
		entity.setBalance(request.getBalance());
		entity.setContent(request.getContent());
		entity.setConsumptionKind(request.getConsumptionKind());
		entity.setCreateTime(DateTimeUtils.getDateTimeInteger());
		return entity;
	}

	/**
	 * 将不为空的属性set到对象中
	 * @param entity 实体对象
	 * @param request 参数对象
	 * @return
	 */
	public static WechatMaintainConponConsumeinfo isNotEmptySetObjectListPage(
			WechatMaintainConponConsumeinfoListRequest request) {
		WechatMaintainConponConsumeinfo entity = new WechatMaintainConponConsumeinfo();
		entity.setFcUserId(request.getFcUserId());
		entity.setOrderNo(request.getOrderNo());
		entity.setStoreId(request.getStoreId());
		entity.setRecordType(request.getRecordType());
		entity.setConsumptionKind(request.getConsumptionKind());
		entity.setCreateTime(request.getCreateTime());
		return entity;
	}
}
