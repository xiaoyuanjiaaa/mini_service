package com.fc.member.wechatmaintain.user.handler;

import com.fc.common.exception.ErrorCode;
import com.fc.common.plugin.mybatis.Page;
import com.fc.common.util.DateTimeUtils;
import com.fc.member.wechatmaintain.user.entity.WechatMaintainSstoreUserRelation;
import com.fc.member.wechatmaintain.user.service.IWechatMaintainSstoreUserRelationService;
import com.fc.protocol.common.message.body.ProtocolResponse;
import com.fc.protocol.demo.request.wechatmaintain.user.*;
import com.fc.protocol.server.handler.Handler;
import com.fc.protocol.server.handler.ReqCodeMapping;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.Map;

/**
 * 微养车用户门店扫码记录表
 * @author linpeng
 * @date 2019年1月8日
 */
@Component
@Handler(module = "wechatMaintain")
public class WechatMaintainSstoreUserRelationHandler {

	private static Logger log = LoggerFactory.getLogger(WechatMaintainSstoreUserRelationHandler.class);

	@Autowired
	IWechatMaintainSstoreUserRelationService wechatMaintainSstoreUserRelationService;

	/**
	 * 查询微养车用户门店扫码记录详情
	 * @author linpeng
	 * @see update_name:linpeng update_time:2019-01-08
	 * @param request
	 * @return
	 */
	@ReqCodeMapping(requestClazz = WechatMaintainSstoreUserRelationRequest.class)
	public ProtocolResponse wechatMaintainSstoreUserRelationGet(WechatMaintainSstoreUserRelationGetRequest request) {
		log.info("时间:{} , wechatMaintainSstoreUserRelationGet------>request:{}", DateTimeUtils.getNow(), request);

		ProtocolResponse response = ProtocolResponse.newInstance().success();
		try {
			WechatMaintainSstoreUserRelation entity = wechatMaintainSstoreUserRelationService
					.getWechatMaintainSstoreUserRelationInfo(request.getWechatMaintainSstoreUserRelationId());
			response.addData("wechatMaintainSstoreUserRelation", entity);
		} catch (Exception e) {
            log.error("wechatMaintainSstoreUserRelationGet系统异常！", e);
            response.error(ErrorCode.QUERY_ERROR.getValue()).msg("代码异常，请联系开发人员！");
		}
		log.info("时间:{} , 返回结果 wechatMaintainSstoreUserRelationList------>response:{}", DateTimeUtils.getNow(), response);
		return response;
	}

	/**
	 * 查询微养车用户门店扫码记录列表
	 * @author linpeng
	 * @see update_name:linpeng update_time:2019-01-08
	 * @param request
	 * @return
	 */
	@ReqCodeMapping(requestClazz = WechatMaintainSstoreUserRelationRequest.class)
	public ProtocolResponse wechatMaintainSstoreUserRelationList(WechatMaintainSstoreUserRelationListRequest request) {
		log.info("时间:{} , wechatMaintainSstoreUserRelationList------>request:{}", DateTimeUtils.getNow(), request);

		ProtocolResponse response = ProtocolResponse.newInstance().success();
		try {
			// 分页对象
			Page page = new Page();
			page.setPage(request.getPage_no());
			page.setRows(request.getPage_size());
			page.setShowTotal(true);
			List<WechatMaintainSstoreUserRelation> rechargeList = wechatMaintainSstoreUserRelationService
					.getWechatMaintainSstoreUserRelationListPage(page, request);
			response.addData("wechatMaintainSstoreUserRelation_list", rechargeList).addData("page_count", page.getPage()).addData("count",
					page.getTotalResult());
		} catch (Exception e) {
            log.error("wechatMaintainSstoreUserRelationList系统异常！", e);
            response.error(ErrorCode.QUERY_ERROR.getValue()).msg("代码异常，请联系开发人员！");
		}
		log.info("时间:{} , 返回结果 wechatMaintainSstoreUserRelationList------>response:{}", DateTimeUtils.getNow(), response);
		return response;
	}

	/**
	 * 创建微养车用户储值卡充值记录
	 * @author yangd
	 * @see update_name:yangd update_time:2019-01-05
	 * @param request
	 * @return
	 */
	@ReqCodeMapping(requestClazz = WechatMaintainSstoreUserRelationCreateRequest.class)
	public ProtocolResponse wechatMaintainSstoreUserRelationCreate(WechatMaintainSstoreUserRelationCreateRequest request) {
		log.info("时间:{} ,  wechatMaintainSstoreUserRelationCreate------>request:{}", DateTimeUtils.getNow(), request);
		ProtocolResponse response = ProtocolResponse.newInstance().success();
		try {
			//校验参数是否为空
			String validResult = request.paramValidate();
			if (validResult != null) {
				return response.error(ErrorCode.PARAM_DATA.getValue()).msg(validResult);
			}

			Map<String, Object> resultStatus = wechatMaintainSstoreUserRelationService.insertSelective(request);
			log.info("resultStatus------>{}", resultStatus);
			if (resultStatus.isEmpty()) {
				response.msg("创建成功");
			} else {
				response.error(99).msg(resultStatus.get("error").toString());
			}
		} catch (Exception e) {
            log.error("wechatMaintainSstoreUserRelationCreate系统异常！", e);
            response.error(ErrorCode.CREATE_ERROR.getValue()).msg("代码异常，请联系开发人员！");
		}
		log.info("时间:{} , 返回结果 wechatMaintainSstoreUserRelationCreate------>response:{}", DateTimeUtils.getNow(), response);
		return response;
	}

	/**
	 * 修改微养车用户储值卡充值记录
	 * @param request
	 * @return
	 */
	@ReqCodeMapping(requestClazz = WechatMaintainSstoreUserRelationRequest.class)
	public ProtocolResponse wechatMaintainSstoreUserRelationUpdate(WechatMaintainSstoreUserRelationUpdateRequest request) {
		log.info("时间:{} , wechatMaintainSstoreUserRelationEditSave------>request:{}", DateTimeUtils.getNow(), request);
		ProtocolResponse response = ProtocolResponse.newInstance().success();
		try {
			//校验参数是否为空
			String validResult = request.paramValidate();
			if (validResult != null) {
				return response.error(ErrorCode.PARAM_DATA.getValue()).msg(validResult);
			}
			Map<String, Object> resultStatus = wechatMaintainSstoreUserRelationService.updateWechatMaintainSstoreUserRelation(request);
			log.info("resultStatus------>{}", resultStatus);
			if (resultStatus.isEmpty()) {
				response.msg("修改成功");
			} else {
				response.error(99).msg(resultStatus.get("error").toString());
			}
		} catch (Exception e) {
            log.error("wechatMaintainSstoreUserRelationUpdate系统异常！", e);
            response.error(ErrorCode.UPDATE_ERROR.getValue()).msg("代码异常，请联系开发人员！");
		}
		log.info("时间:{} , 返回结果 wechatMaintainSstoreUserRelationEditSave------>response:{}", DateTimeUtils.getNow(), response);
		return response;
	}




}
