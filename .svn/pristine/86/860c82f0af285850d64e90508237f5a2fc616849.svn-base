package com.fc.member.wechatmaintain.user.service.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.fc.common.exception.ErrorCode;
import com.fc.common.plugin.mybatis.IMapper;
import com.fc.common.plugin.mybatis.Page;
import com.fc.common.plugin.mybatis.PageQuery;
import com.fc.common.service.impl.ServiceImpl;
import com.fc.member.wechatmaintain.user.dao.IWechatMaintainRechargeDao;
import com.fc.member.wechatmaintain.user.entity.WechatMaintainRecharge;
import com.fc.member.wechatmaintain.user.service.IWechatMaintainRechargeService;
import com.fc.protocol.demo.request.wechatmaintain.user.WechatMaintainRechargeRequest;

/**
 * <p>Title: WechatMaintainRecharge</p>
 * <p>Description: 微养车用户储值卡充值记录 Service 层</p>
 * @author yangd
 * @date 2018-12-28 17:13:47
 */
@Service("wechatMaintainRechargeService")
public class WechatMaintainRechargeServiceImp extends ServiceImpl<WechatMaintainRecharge>
		implements IWechatMaintainRechargeService {

	private static Logger log = LoggerFactory.getLogger(WechatMaintainRechargeServiceImp.class);

	@Autowired
	private IWechatMaintainRechargeDao wechatMaintainRechargeDao;

	@Override
	protected IMapper<WechatMaintainRecharge> getDao() {
		return wechatMaintainRechargeDao;
	}

	/**
	 * 插入数据
	 */
	@Override
	public Map<String, Object> insertSelective(WechatMaintainRechargeRequest request) {
		log.info("insertSelective---------->:" + request);
		Map<String, Object> resultMap = new HashMap<>();
		// 将不为空的属性set到对象中
		WechatMaintainRecharge entity = WechatMaintainRecharge.isNotEmptySetObject(request);
		log.info("WechatMaintainRecharge---------->:" + entity);
		int result = wechatMaintainRechargeDao.insertSelective(entity);
		if (result <= 0) {
			resultMap.put("error", ErrorCode.CREATE_ERROR.getDesc());
			return resultMap;
		}
		return resultMap;
	}

	/**
	 * 更新数据
	 */
	@Override
	public Map<String, Object> updateWechatMaintainRecharge(WechatMaintainRechargeRequest request) throws Exception {
		log.info("updateWechatMaintainRecharge---------->:" + request);
		Map<String, Object> resultMap = new HashMap<>();
		//校验参数是否为空
		String validResult = request.paramValidateEdit();
		if (validResult != null) {
			resultMap.put("error", validResult);
			return resultMap;
		}
		// 将不为空的属性set到对象中
		WechatMaintainRecharge entity = WechatMaintainRecharge.isNotEmptySetObject(request);
		log.info("WechatMaintainRecharge---------->:" + entity);
		wechatMaintainRechargeDao.update(entity);
		return resultMap;
	}

	/**
	 * 查询微养车用户储值卡充值记录-分页
	 */
	@Override
	public List<WechatMaintainRecharge> getWechatMaintainRechargeListPage(Page page,
			WechatMaintainRechargeRequest request) {
		log.info("getWechatMaintainRechargeListPage---------->:" + request);
		// set 对象属性值
		WechatMaintainRecharge entity = WechatMaintainRecharge.isNotEmptySetObject(request);
		log.info("WechatMaintainRecharge---------->{}", entity.toString());
		// 设置分页，查询条件
		PageQuery pageQuery = new PageQuery();
		pageQuery.setPage(page);
		pageQuery.setCondition(entity);
		return wechatMaintainRechargeDao.getRowsPage(pageQuery);
	}
}
