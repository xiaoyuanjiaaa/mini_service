package com.fc.member.store.user.service.impl;

import java.util.Date;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.fc.common.plugin.mybatis.IMapper;
import com.fc.common.service.impl.ServiceImpl;
import com.fc.common.util.DataConverHelper;
import com.fc.common.util.DateTimeUtils;
import com.fc.common.util.DataConverHelper.DataConver;
import com.fc.member.store.user.dao.IStoreCouponDao;
import com.fc.member.store.user.entity.StoreCoupon;
import com.fc.member.store.user.service.IStoreCouponService;
import com.fc.protocol.demo.request.store.user.StoreCouponRequest;
/**
 * <p>Title: StoreCoupon</p>
 * <p>Description:  Service 层</p>
 * @author yangd
 * @date 2018-12-27 16:31:06
 */
@Service("storeCouponService")
public class StoreCouponServiceImp extends ServiceImpl<StoreCoupon> implements IStoreCouponService{

	@Autowired
	private IStoreCouponDao storeCouponDao;
	
	@Override
	protected IMapper<StoreCoupon> getDao() {
		return storeCouponDao;
	}
	@Override
	public List<Map<String, Object>> getQuery(StoreCouponRequest request) throws Exception {
		StoreCoupon storeCoupon = new StoreCoupon();
		storeCoupon.setStoreId(request.getStoreId());
		//再次查询
		List<StoreCoupon> storeList =  storeCouponDao.getRows(storeCoupon);
		if(storeList.size()>0) {
			List<Map<String, Object>> dataList = DataConverHelper.forList(storeList,
					new DataConver<StoreCoupon>() {
						@Override
						public void conver(Map<String, Object> target, StoreCoupon source)
								throws Exception {
							// TODO Auto-generated method stub
							target.put("IsCards", source.getIsCards());
							target.put("IsMaster",source.getIsMaster());
							target.put("IsPlan",source.getIsPlan());
							target.put("IsQuickPay",source.getIsQuickPay());
							target.put("IsSelfGoods",source.getIsSelfGoods());
							target.put("StoreCouponId",source.getStoreCouponId());
							target.put("UpdateNumber",source.getUpdateNumber());
							String uptime = source.getUpdateTime()==null ? "0":source.getUpdateTime().toString();
							uptime = 	Integer.valueOf(uptime) > 0 ? DateTimeUtils.getStrFromTimestamp10(
									Integer.valueOf(uptime), DateTimeUtils.FORMAT_DATE_TIME_24HOURS) : "";
							target.put("UpdateTime",uptime);								
						}
			});
			return dataList;
		}
		return null;
	}

	/**
	 * 新增门店套餐使用范围
	 */
	@Override
	public int insertStoreCoupon(StoreCouponRequest request) throws Exception {
		StoreCoupon storeCoupon = new StoreCoupon();
		storeCoupon.setStoreCouponId(request.getStoreCouponId());
		storeCoupon.setStoreId(request.getStoreId());
		storeCoupon.setIsCards(request.getIsCards());
		storeCoupon.setIsMaster(request.getIsMaster());
		storeCoupon.setIsPlan(request.getIsPlan());
		storeCoupon.setIsQuickPay(request.getIsQuickPay());
		storeCoupon.setIsSelfGoods(request.getIsSelfGoods());
		storeCoupon.setUpdateNumber(request.getUpdateNumber());
		storeCoupon.setUpdateTime((int) (new Date().getTime()/ 1000));
		storeCoupon.setCreateTime((int) (new Date().getTime()/ 1000));//获取当前时间
		return storeCouponDao.insertSelective(storeCoupon);
	}

	/**
	 * 更新门店套餐使用范围
	 */
	@Override
	public void updateStoreCoupon(StoreCouponRequest request) throws Exception {
		StoreCoupon storeCoupon = new StoreCoupon();
		storeCoupon.setStoreCouponId(request.getStoreCouponId());
		storeCoupon.setStoreId(request.getStoreId());
		storeCoupon.setIsCards(request.getIsCards());
		storeCoupon.setIsMaster(request.getIsMaster());
		storeCoupon.setIsPlan(request.getIsPlan());
		storeCoupon.setIsQuickPay(request.getIsQuickPay());
		storeCoupon.setIsSelfGoods(request.getIsSelfGoods());
		storeCoupon.setUpdateNumber(request.getUpdateNumber());
		storeCoupon.setUpdateTime((int) (new Date().getTime()/ 1000));//获取当前修改时间
		storeCouponDao.update(storeCoupon);
	}
}
