package com.fc.member.wechatmaintain.user.handler;

import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.fc.common.exception.ErrorCode;
import com.fc.common.plugin.mybatis.Page;
import com.fc.common.util.DateTimeUtils;
import com.fc.member.wechatmaintain.user.entity.WechatMaintainUserCar;
import com.fc.member.wechatmaintain.user.service.IWechatMaintainUserCarService;
import com.fc.member.wechatmaintain.user.service.IWechatMaintainUserService;
import com.fc.protocol.common.message.body.ProtocolResponse;
import com.fc.protocol.demo.request.wechatmaintain.user.WechatMaintainUserCarRequest;
import com.fc.protocol.server.handler.Handler;
import com.fc.protocol.server.handler.ReqCodeMapping;

/**
 * 微养车 车主车辆档案
 * @author yangd
 * @date 2019年1月3日
 */
@Component
@Handler(module = "wechatMaintainUserCar")
public class WechatMaintainUserCarHandler {

	private static Logger log = LoggerFactory.getLogger(WechatMaintainUserCarHandler.class);

	@Autowired
	IWechatMaintainUserCarService wechatMaintainUserCarService;
	@Autowired
	IWechatMaintainUserService wechatMaintainUserService;

	/**
	 * 微养车 - 查询车辆档案列表
	 * @author yangd
	 * @see update_name:yangd update_time:2019-01-05
	 * @param request
	 * @return
	 */
	@ReqCodeMapping(requestClazz = WechatMaintainUserCarRequest.class)
	public ProtocolResponse wechatMaintainUserCarList(WechatMaintainUserCarRequest request) {
		log.info("时间:{} , wechatMaintainUserCarList------>request:{}", DateTimeUtils.getNow(), request);

		ProtocolResponse response = ProtocolResponse.newInstance().success();
		try {
			// 分页对象
			Page page = new Page();
			page.setPage(request.getPage_no());
			page.setRows(request.getPage_size());
			page.setShowTotal(true);
			List<WechatMaintainUserCar> userCarList = wechatMaintainUserCarService
					.getWechatMaintainUserCarListPage(page, request);
			response.addData("user_car_list", userCarList).addData("page_count", page.getPage()).addData("count",
					page.getTotalResult());
		} catch (Exception e) {
			log.error(e.getMessage());
			e.printStackTrace();
			response.error(99).msg("代码异常，请联系开发人员！");
		}
		log.info("时间:{} , 返回结果 wechatMaintainUserCarList------>response:{}", DateTimeUtils.getNow(), response);
		return response;
	}

	/**
	 * 微养车 - 我的爱车档案列表
	 * @author yangd
	 * @see update_name:yangd update_time:2019-01-05
	 * @param request
	 * @return
	 */
	@ReqCodeMapping(requestClazz = WechatMaintainUserCarRequest.class)
	public ProtocolResponse wechatMaintainUserCarByUserId(WechatMaintainUserCarRequest request) {
		log.info("时间:{} , wechatMaintainUserCarByUserId------>request:{}", DateTimeUtils.getNow(), request);

		ProtocolResponse response = ProtocolResponse.newInstance().success();
		try {
			//校验参数是否为空
			String validResult = request.paramValidateByUserId();
			if (validResult != null) {
				return response.error(ErrorCode.PARAM_DATA.getValue()).msg(validResult);
			}
			List<WechatMaintainUserCar> userCarList = wechatMaintainUserCarService.getUserCarListByUserId(request);
			response.addData("user_car_list", userCarList);
		} catch (Exception e) {
			log.error(e.getMessage());
			e.printStackTrace();
			response.error(99).msg("代码异常，请联系开发人员！");
		}
		log.info("时间:{} , 返回结果 wechatMaintainUserCarByUserId------>response:{}", DateTimeUtils.getNow(), response);
		return response;
	}

	/**
	 * 微养车 - 查询爱车档案详情
	 * @author yangd
	 * @see update_name:yangd update_time:2019-01-05
	 * @param request
	 * @return
	 */
	@ReqCodeMapping(requestClazz = WechatMaintainUserCarRequest.class)
	public ProtocolResponse wechatMaintainUserCarDetails(WechatMaintainUserCarRequest request) {
		log.info("时间:{} , wechatMaintainUserCarDetails------>request:{}", DateTimeUtils.getNow(), request);
		ProtocolResponse response = ProtocolResponse.newInstance().success();
		try {
			//校验参数是否为空
			String validResult = request.paramValidateInfo();
			if (validResult != null) {
				return response.error(ErrorCode.PARAM_DATA.getValue()).msg(validResult);
			}
			WechatMaintainUserCar userCar = wechatMaintainUserCarService.getByPK(request.getWechatMaintainUserId());
			response.addData("user_car", userCar);
		} catch (Exception e) {
			log.error(e.getMessage());
			e.printStackTrace();
			response.error(99).msg("代码异常，请联系开发人员！");
		}
		log.info("时间:{} , 返回结果 wechatMaintainUserCarDetails------>response:{}", DateTimeUtils.getNow(), response);
		return response;
	}

	/**
	 * 微养车 - 创建车档案信息
	 * @author yangd
	 * @see update_name:yangd update_time:2019-01-05
	 * @param request
	 * @return
	 */
	@ReqCodeMapping(requestClazz = WechatMaintainUserCarRequest.class)
	public ProtocolResponse wechatMaintainUserCarCreate(WechatMaintainUserCarRequest request) {
		log.info("时间:{} ,  wechatMaintainUserCarCreate------>request:{}", DateTimeUtils.getNow(), request);
		ProtocolResponse response = ProtocolResponse.newInstance().success();
		try {
			//校验参数是否为空
			String validResult = request.paramValidateCreate();
			if (validResult != null) {
				return response.error(ErrorCode.PARAM_DATA.getValue()).msg(validResult);
			}

			Map<String, Object> resultStatus = wechatMaintainUserCarService.insertSelective(request);
			log.info("resultStatus------>{}", resultStatus);
			if (resultStatus.isEmpty()) {
				response.msg("创建成功");
			} else {
				response.error(99).msg(resultStatus.get("error").toString());
			}
		} catch (Exception e) {
			log.error(e.getMessage());
			e.printStackTrace();
			response.error(99).msg("代码异常，请联系开发人员！");
		}
		log.info("时间:{} , 返回结果 wechatMaintainUserCarCreate------>response:{}", DateTimeUtils.getNow(), response);
		return response;
	}

	/**
	 * 微养车 - 修改用户车档案信息
	 * @author yangd
	 * @see update_name:yangd update_time:2019-01-05
	 * @param request
	 * @return
	 */
	@ReqCodeMapping(requestClazz = WechatMaintainUserCarRequest.class)
	public ProtocolResponse wechatMaintainUserCarEditSave(WechatMaintainUserCarRequest request) {
		log.info("时间:{} ,  wechatMaintainUserCarEditSave------>request:{}", DateTimeUtils.getNow(), request);
		ProtocolResponse response = ProtocolResponse.newInstance().success();
		try {
			//校验参数是否为空
			String validResult = request.paramValidateCreate();
			if (validResult != null) {
				return response.error(ErrorCode.PARAM_DATA.getValue()).msg(validResult);
			}
			Map<String, Object> resultStatus = wechatMaintainUserCarService.updateWechatMaintainUserCar(request);
			log.info("resultStatus------>{}", resultStatus);
			if (resultStatus.isEmpty()) {
				response.msg("修改成功");
			} else {
				response.error(99).msg(resultStatus.get("error").toString());
			}
		} catch (Exception e) {
			log.error(e.getMessage());
			e.printStackTrace();
			response.error(99).msg("代码异常，请联系开发人员！");
		}
		log.info("时间:{} , 返回结果 wechatMaintainUserCarEditSave------>response:{}", DateTimeUtils.getNow(), response);
		return response;
	}

	/**
	 * 切换默认爱车档案
	 * @author yangd
	 * @see update_name:yangd update_time:2019-01-05
	 * @param request
	 * @return
	 */
	@ReqCodeMapping(requestClazz = WechatMaintainUserCarRequest.class)
	public ProtocolResponse wechatMaintainUserCarSwitchingDefaultCar(WechatMaintainUserCarRequest request) {
		log.info("时间:{} ,  wechatMaintainUserCarSwitchingDefaultCar------>request:{}", DateTimeUtils.getNow(), request);
		ProtocolResponse response = ProtocolResponse.newInstance().success();
		try {
			//校验参数是否为空
			String validResult = request.paramValidateSwitchingDefaultCar();
			if (validResult != null) {
				return response.error(ErrorCode.PARAM_DATA.getValue()).msg(validResult);
			}

			Map<String, Object> resultStatus = wechatMaintainUserCarService.switchingUserDefaultCar(request);
			if (resultStatus.isEmpty()) {
				response.msg("切换成功");
			} else {
				response.error(99).msg(resultStatus.get("error").toString());
			}
		} catch (Exception e) {
			log.error(e.getMessage());
			e.printStackTrace();
			response.error(99).msg("代码异常，请联系开发人员！");
		}
		log.info("时间:{} , 返回结果 wechatMaintainUserCarSwitchingDefaultCar------>response:{}", DateTimeUtils.getNow(),
				response);
		return response;
	}

	/**
	 * 删除爱车档案
	 * @author yangd
	 * @see update_name:yangd update_time:2019-01-05
	 * @param request
	 * @return
	 */
	@ReqCodeMapping(requestClazz = WechatMaintainUserCarRequest.class)
	public ProtocolResponse wechatMaintainUserCarDelete(WechatMaintainUserCarRequest request) {
		log.info("时间:{} ,  wechatMaintainUserCarDelete------>request:{}", DateTimeUtils.getNow(), request);
		ProtocolResponse response = ProtocolResponse.newInstance().success();
		try {
			//校验参数是否为空
			String validResult = request.paramValidateInfo();
			if (validResult != null) {
				return response.error(ErrorCode.PARAM_DATA.getValue()).msg(validResult);
			}
			wechatMaintainUserCarService.updateStatus(request);
		} catch (Exception e) {
			log.error(e.getMessage());
			e.printStackTrace();
			response.error(99).msg("代码异常，请联系开发人员！");
		}
		log.info("时间:{} , 返回结果 wechatMaintainUserCarDelete------>response:{}", DateTimeUtils.getNow(), response);
		return response;
	}

	/**
	 * 查询用户默认爱车档案
	 * @author yangd
	 * @see update_name:yangd update_time:2019-01-05
	 * @param request
	 * @return
	 */
	@ReqCodeMapping(requestClazz = WechatMaintainUserCarRequest.class)
	public ProtocolResponse wechatMaintainUserCarDefaultCar(WechatMaintainUserCarRequest request) {
		log.info("时间:{} ,  wechatMaintainUserCarDefaultCar------>request:{}", DateTimeUtils.getNow(), request);
		ProtocolResponse response = ProtocolResponse.newInstance().success();
		try {
			//校验参数是否为空
			String validResult = request.paramValidateByUserId();
			if (validResult != null) {
				return response.error(ErrorCode.PARAM_DATA.getValue()).msg(validResult);
			}
			WechatMaintainUserCar userCar = wechatMaintainUserCarService.getUserDefaultCar(request);
			response.addData("user_car", userCar);
		} catch (Exception e) {
			log.error(e.getMessage());
			e.printStackTrace();
			response.error(99).msg("代码异常，请联系开发人员！");
		}
		log.info("时间:{} , 返回结果 wechatMaintainUserCarDefaultCar------>response:{}", DateTimeUtils.getNow(), response);
		return response;
	}
}
