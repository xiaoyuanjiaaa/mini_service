package com.fc.member.fc.handler;

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.fc.common.exception.ErrorCode;
import com.fc.member.fc.service.IFcUserService;
import com.fc.protocol.common.message.body.ProtocolResponse;
import com.fc.protocol.demo.request.fc.CreateUserRequest;
import com.fc.protocol.server.handler.Handler;
import com.fc.protocol.server.handler.ReqCodeMapping;

/**
 * 用户基础操作Handler
 * @author	xiaozw
 * @data	2019-1-3
 */
@Component
@Handler(module = "user")
public class UserHandler {
	private static Logger log = LoggerFactory.getLogger(UserHandler.class);

	@Autowired
	private IFcUserService fcUserService;

	/**
	 * 新增用户接口
	 * @author	xiaozw
	 * @see update_name:xiaozw update_time:2019-1-3
	 * @param request
	 */
	@ReqCodeMapping(requestClazz = CreateUserRequest.class)
	public ProtocolResponse createUser(CreateUserRequest request) {
		try {
			log.info("StorePublicUserHandler------>request:{}" + request);
			String validateResult = request.paramValidate();
			if (validateResult != null) {
				return ProtocolResponse.newInstance().error(ErrorCode.PARAM_DATA.getValue()).msg(validateResult);
			}
			Map<String, String> resultStatus = fcUserService.insertFcUserAndPublicUser(request);
			if (resultStatus.isEmpty()) {
				return ProtocolResponse.newInstance().success();
			} else {
				return ProtocolResponse.newInstance().error(99).msg(resultStatus.get("error"));
			}
		} catch (Exception e) {
			log.info("createUser:", e.getMessage());
			e.printStackTrace();
			return ProtocolResponse.newInstance().error(99).msg("代码异常，请联系开发人员");
		}
	}
}
