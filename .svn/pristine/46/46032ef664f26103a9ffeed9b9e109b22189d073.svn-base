package com.fc.member.wechatmaintain.user.handler;

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.fc.common.exception.ErrorCode;
import com.fc.common.plugin.mybatis.Page;
import com.fc.common.util.DateTimeUtils;
import com.fc.member.wechatmaintain.user.service.IWechatMaintainConponConsumeinfoService;
import com.fc.protocol.common.message.body.ProtocolResponse;
import com.fc.protocol.demo.request.wechatmaintain.user.WechatMaintainConponConsumeinfoConsumptionCountAndBalanceRequest;
import com.fc.protocol.demo.request.wechatmaintain.user.WechatMaintainConponConsumeinfoCreateRequest;
import com.fc.protocol.demo.request.wechatmaintain.user.WechatMaintainConponConsumeinfoDetailsListRequest;
import com.fc.protocol.demo.request.wechatmaintain.user.WechatMaintainConponConsumeinfoDetailsRequest;
import com.fc.protocol.demo.request.wechatmaintain.user.WechatMaintainConponConsumeinfoListRequest;
import com.fc.protocol.demo.request.wechatmaintain.user.WechatMaintainConponConsumeinfoOverviewListRequest;
import com.fc.protocol.demo.request.wechatmaintain.user.WechatMaintainConponConsumeinfoStoreTotalAmountBalanceRequest;
import com.fc.protocol.demo.request.wechatmaintain.user.WechatMaintainConponConsumeinfoStoreTotalAmountRequest;
import com.fc.protocol.server.handler.Handler;
import com.fc.protocol.server.handler.ReqCodeMapping;

/**
 * 微养车用户储值卡充值消费记录表
 * @author yangd
 * @date 2019年1月7日
 */
@Component
@Handler(module = "wechatmaintain")
public class WechatMaintainConponConsumeinfoHandler {

	private static Logger log = LoggerFactory.getLogger(WechatMaintainConponConsumeinfoHandler.class);

	@Autowired
	IWechatMaintainConponConsumeinfoService wechatMaintainConponConsumeinfoService;

	/**
	 * 储值卡消费记录总表(运营后台-分页,关联门店、微养车用户表查询)
	 * 门店ID、门店名称、订单号、车主用户名、车主手机、消费种类、消费开始时间、消费结束时间、当前页数、每页记录数
	 * @author yangd
	 * @see update_name:yangd update_time:2019-01-08
	 * @param request
	 * @return
	 */
	@ReqCodeMapping(requestClazz = WechatMaintainConponConsumeinfoListRequest.class)
	public ProtocolResponse wechatMaintainConponConsumeinfoList(WechatMaintainConponConsumeinfoListRequest request) {
		log.info("时间:{} , wechatMaintainConponConsumeinfoList------>request:{}", DateTimeUtils.getNow(), request);

		ProtocolResponse response = ProtocolResponse.newInstance().success();
		try {
			// 分页对象
			Page page = new Page();
			page.setPage(request.getPage_no());
			page.setRows(request.getPage_size());
			page.setShowTotal(true);
			response.addData("wechat_maintain_conpon_consumeinfo_list",
					wechatMaintainConponConsumeinfoService.getConponConsumeinfoListPage(page, request))
					.addData("page_count", page.getPage()).addData("count", page.getTotalResult());
		} catch (Exception e) {
			log.error("wechatMaintainConponConsumeinfoList系统异常！", e);
			response.error(ErrorCode.QUERY_ERROR.getValue()).msg("代码异常，请联系开发人员！");
		}
		log.info("时间:{} , 返回结果 wechatMaintainConponConsumeinfoList------>response:{}", DateTimeUtils.getNow(),
				response);
		return response;
	}

	/**
	 * 储值卡总览表(运营后台-分页,关联门店表查询)
	 * 门店ID、门店名称、门店APP手机号、总计开始时间、总计结束时间、当前页数、每页记录数
	 * @author yangd
	 * @see update_name:yangd update_time:2019-01-09
	 * @param request
	 * @return
	 */
	@ReqCodeMapping(requestClazz = WechatMaintainConponConsumeinfoOverviewListRequest.class)
	public ProtocolResponse wechatMaintainConponConsumeinfoOverviewList(
			WechatMaintainConponConsumeinfoOverviewListRequest request) {
		log.info("时间:{} , wechatMaintainConponConsumeinfoOverviewList------>request:{}", DateTimeUtils.getNow(),
				request);

		ProtocolResponse response = ProtocolResponse.newInstance().success();
		try {
			// 分页对象
			Page page = new Page();
			page.setPage(request.getPage_no());
			page.setRows(request.getPage_size());
			page.setShowTotal(true);
			response.addData("wechat_maintain_conpon_consumeinfo_overview_list",
					wechatMaintainConponConsumeinfoService.getConponConsumeinfoOverviewListPage(page, request))
					.addData("page_count", page.getPage()).addData("count", page.getTotalResult());
		} catch (Exception e) {
			log.error("wechatMaintainConponConsumeinfoOverviewList系统异常！", e);
			response.error(ErrorCode.QUERY_ERROR.getValue()).msg("代码异常，请联系开发人员！");
		}
		log.info("时间:{} , 返回结果 wechatMaintainConponConsumeinfoOverviewList------>response:{}", DateTimeUtils.getNow(),
				response);
		return response;
	}

	/**
	 * 我的 - 储值卡收支详情(查询储值卡使用记录)
	 * 用户id、门店id
	 * @author yangd
	 * @see update_name:yangd update_time:2019-01-09
	 * @param request
	 * @return
	 */
	@ReqCodeMapping(requestClazz = WechatMaintainConponConsumeinfoDetailsListRequest.class)
	public ProtocolResponse wechatMaintainConponConsumeinfoDetailsList(
			WechatMaintainConponConsumeinfoDetailsListRequest request) {
		log.info("时间:{} , wechatMaintainConponConsumeinfoDetailsList------>request:{}", DateTimeUtils.getNow(),
				request);

		ProtocolResponse response = ProtocolResponse.newInstance().success();
		try {
			//校验参数是否为空
			String validResult = request.paramValidate();
			if (validResult != null) {
				return response.error(ErrorCode.PARAM_DATA.getValue()).msg(validResult);
			}
			response.addData("wechat_maintain_conpon_consumeinfo_details_list",
					wechatMaintainConponConsumeinfoService.getConponConsumeinfoDetailsList(request));
		} catch (Exception e) {
			log.error("wechatMaintainConponConsumeinfoDetailsList系统异常！", e);
			response.error(ErrorCode.QUERY_ERROR.getValue()).msg("代码异常，请联系开发人员！");
		}
		log.info("时间:{} , 返回结果 wechatMaintainConponConsumeinfoDetailsList------>response:{}", DateTimeUtils.getNow(),
				response);
		return response;
	}

	/**
	 * 根据记录ID查询储值卡使用记录 - 收支详情
	 * 记录id
	 * @author yangd
	 * @see update_name:yangd update_time:2019-01-09
	 * @param request
	 * @return
	 */
	//根据记录ID查询储值卡使用记录 - 收支详情
	//	记录id
	@ReqCodeMapping(requestClazz = WechatMaintainConponConsumeinfoDetailsRequest.class)
	public ProtocolResponse wechatMaintainConponConsumeinfoDetails(
			WechatMaintainConponConsumeinfoDetailsRequest request) {
		log.info("时间:{} , wechatMaintainConponConsumeinfoDetails------>request:{}", DateTimeUtils.getNow(), request);

		ProtocolResponse response = ProtocolResponse.newInstance().success();
		try {
			//校验参数是否为空
			String validResult = request.paramValidate();
			if (validResult != null) {
				return response.error(ErrorCode.PARAM_DATA.getValue()).msg(validResult);
			}
			response.addData("wechat_maintain_conpon_consumeinfo_details",
					wechatMaintainConponConsumeinfoService.getByPK(request.getWechatMaintainConponConsumeinfoId()));
		} catch (Exception e) {
			log.error("wechatMaintainConponConsumeinfoDetails系统异常！", e);
			response.error(ErrorCode.QUERY_ERROR.getValue()).msg("代码异常，请联系开发人员！");
		}
		log.info("时间:{} , 返回结果 wechatMaintainConponConsumeinfoDetails------>response:{}", DateTimeUtils.getNow(),
				response);
		return response;
	}

	/**
	 * 根据store_id查询门店所售储值卡金额
	 * @author yangd
	 * @see update_name:yangd update_time:2019-01-09
	 * @param request
	 * @return
	 */
	//根据store_id查询门店所售储值卡金额
	@ReqCodeMapping(requestClazz = WechatMaintainConponConsumeinfoStoreTotalAmountRequest.class)
	public ProtocolResponse wechatMaintainConponConsumeinfoStoreTotalAmount(
			WechatMaintainConponConsumeinfoStoreTotalAmountRequest request) {
		log.info("时间:{} , wechatMaintainConponConsumeinfoStoreTotalAmount------>request:{}", DateTimeUtils.getNow(),
				request);

		ProtocolResponse response = ProtocolResponse.newInstance().success();
		try {
			//校验参数是否为空
			String validResult = request.paramValidate();
			if (validResult != null) {
				return response.error(ErrorCode.PARAM_DATA.getValue()).msg(validResult);
			}
			response.addData("store_total_amount", wechatMaintainConponConsumeinfoService.getStoreTotalAmount(request));
		} catch (Exception e) {
			log.error("wechatMaintainConponConsumeinfoStoreTotalAmount系统异常！", e);
			response.error(ErrorCode.QUERY_ERROR.getValue()).msg("代码异常，请联系开发人员！");
		}
		log.info("时间:{} , 返回结果 wechatMaintainConponConsumeinfoStoreTotalAmount------>response:{}",
				DateTimeUtils.getNow(), response);
		return response;
	}

	/**
	 * 门店APP储值卡设置显示充值总额、当前总余额
	 * 门店id
	 * @author yangd
	 * @see update_name:yangd update_time:2019-01-09
	 * @param request
	 * @return
	 */
	@ReqCodeMapping(requestClazz = WechatMaintainConponConsumeinfoStoreTotalAmountBalanceRequest.class)
	public ProtocolResponse wechatMaintainConponConsumeinfoStoreTotalAmountBalance(
			WechatMaintainConponConsumeinfoStoreTotalAmountBalanceRequest request) {
		log.info("时间:{} , wechatMaintainConponConsumeinfoStoreTotalAmountBalance------>request:{}",
				DateTimeUtils.getNow(), request);

		ProtocolResponse response = ProtocolResponse.newInstance().success();
		try {
			//校验参数是否为空
			String validResult = request.paramValidate();
			if (validResult != null) {
				return response.error(ErrorCode.PARAM_DATA.getValue()).msg(validResult);
			}
			Map<String, Object> resultMap = wechatMaintainConponConsumeinfoService.getStoreTotalAmountBalance(request);
			response.addData("store_total_amount_balance", resultMap);
		} catch (Exception e) {
			log.error("wechatMaintainConponConsumeinfoStoreTotalAmountBalance系统异常！", e);
			response.error(ErrorCode.QUERY_ERROR.getValue()).msg("代码异常，请联系开发人员！");
		}
		log.info("时间:{} , 返回结果 wechatMaintainConponConsumeinfoStoreTotalAmountBalance------>response:{}",
				DateTimeUtils.getNow(), response);
		return response;
	}

	/**
	 * TODO 暂时未写SQL，门店APP客户管理(查询储值卡消费次数、余额)
	 * 门店id
	 * @author yangd
	 * @see update_name:yangd update_time:2019-01-09
	 * @param request
	 * @return
	 */
	@ReqCodeMapping(requestClazz = WechatMaintainConponConsumeinfoConsumptionCountAndBalanceRequest.class)
	public ProtocolResponse wechatMaintainConponConsumeinfoConsumptionCountAndBalance(
			WechatMaintainConponConsumeinfoConsumptionCountAndBalanceRequest request) {
		log.info("时间:{} , wechatMaintainConponConsumeinfoConsumptionCountAndBalance------>request:{}",
				DateTimeUtils.getNow(), request);

		ProtocolResponse response = ProtocolResponse.newInstance().success();
		try {
			//校验参数是否为空
			String validResult = request.paramValidate();
			if (validResult != null) {
				return response.error(ErrorCode.PARAM_DATA.getValue()).msg(validResult);
			}
			Map<String, Object> resultMap = wechatMaintainConponConsumeinfoService
					.getConsumptionCountAndBalance(request);
			response.addData("store_total_amount_balance", resultMap);
		} catch (Exception e) {
			log.error("wechatMaintainConponConsumeinfoConsumptionCountAndBalance系统异常！", e);
			response.error(ErrorCode.QUERY_ERROR.getValue()).msg("代码异常，请联系开发人员！");
		}
		log.info("时间:{} , 返回结果 wechatMaintainConponConsumeinfoConsumptionCountAndBalance------>response:{}",
				DateTimeUtils.getNow(), response);
		return response;
	}

	/**
	 * 创建储值卡充值消费记录
	 * 订单号、用户id、门店id、门店储值卡套餐id、记录类型、记录金额、赠送金额、当前余额、消费描述、消费种类、消费时间
	 * @author yangd
	 * @see update_name:yangd update_time:2019-01-09
	 * @param request
	 * @return
	 */
	@ReqCodeMapping(requestClazz = WechatMaintainConponConsumeinfoCreateRequest.class)
	public ProtocolResponse wechatMaintainConponConsumeinfoCreate(
			WechatMaintainConponConsumeinfoCreateRequest request) {
		log.info("时间:{} ,  wechatMaintainConponConsumeinfoCreate------>request:{}", DateTimeUtils.getNow(), request);
		ProtocolResponse response = ProtocolResponse.newInstance().success();
		try {
			//校验参数是否为空
			String validResult = request.paramValidate();
			if (validResult != null) {
				return response.error(ErrorCode.PARAM_DATA.getValue()).msg(validResult);
			}

			Map<String, Object> resultStatus = wechatMaintainConponConsumeinfoService.insertSelective(request);
			log.info("resultStatus------>{}", resultStatus);
			if (resultStatus.isEmpty()) {
				response.msg("创建成功");
			} else {
				response.error(ErrorCode.CREATE_ERROR.getValue()).msg(resultStatus.get("error").toString());
			}
		} catch (Exception e) {
			log.error("wechatMaintainConponConsumeinfoCreate系统异常！", e);
			response.error(ErrorCode.CREATE_ERROR.getValue()).msg("代码异常，请联系开发人员！");
		}
		log.info("时间:{} , 返回结果 wechatMaintainConponConsumeinfoCreate------>response:{}", DateTimeUtils.getNow(),
				response);
		return response;
	}
}
