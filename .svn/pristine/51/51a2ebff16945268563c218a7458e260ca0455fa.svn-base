package com.fc.member.wechatplatform.user.handler;

import com.fc.common.exception.ErrorCode;
import com.fc.common.plugin.mybatis.Page;
import com.fc.member.wechatplatform.user.entity.WechatPlatformUser;
import com.fc.member.wechatplatform.user.service.IWechatPlatformUserService;
import com.fc.protocol.common.message.body.ProtocolResponse;
import com.fc.protocol.demo.request.wechatplatform.user.WechatPlatformUserRequest;
import com.fc.protocol.server.handler.Handler;
import com.fc.protocol.server.handler.ReqCodeMapping;
import org.apache.ibatis.annotations.Param;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.Date;
import java.util.HashMap;
import java.util.List;

/**微养车找店 - 用户管理
 * @Author: linpeng
 * @Date: 2019/1/3 18:41
 * @Version 1.0
 */
@Component
@Handler(module = "user")
public class WechatPlatformUserHandler {

	private static Logger log = LoggerFactory.getLogger(WechatPlatformUserHandler.class);
	
	@Autowired
	IWechatPlatformUserService wechatPlatformUserService;


	/**
	 * @Description: 查询微养车找店用户
	 * @Param: [request]
	 * @return: com.fc.protocol.common.message.body.ProtocolResponse
	 * @Author: linpeng
	 * @CreateDate: 2019/1/5
	 * @Update: linpeng
	 * @UpdateDate: 2019/1/5
	 */
    @ReqCodeMapping(requestClazz = WechatPlatformUserRequest.class)
	public ProtocolResponse wechatPlatformUserGet(WechatPlatformUserRequest request) {
		log.info("获取用户信息------>request:{}", request);
		ProtocolResponse response=null;
		try {
            //校验参数是否为空
            String validResult = request.paramValidateGet();
            if(validResult != null ) {
               return response = ProtocolResponse.newInstance().error(ErrorCode.PARAM_DATA.getValue()).msg(validResult);
            }
			log.info("查询微养车找店用户，openid:{}",request.getOpenid());
			WechatPlatformUser wechatPlatformUser  = wechatPlatformUserService.getByOpenid(request.getOpenid());
			log.info("查询结果:{}", wechatPlatformUser);

			if ( wechatPlatformUser != null){
			    response = ProtocolResponse.newInstance().success().addData("data",wechatPlatformUser);
			}
			else {
			    response = ProtocolResponse.newInstance().error(1011).msg("该用户不存在");
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.info("操作失败");
			return ProtocolResponse.newInstance().error(10199).msg("操作失败");
		}
		log.info("获取用户信息------>response:{}", response);
		return response;
	}

	/**
	 * @Description: 查询用户管理列表
	 * @Param: [request]
	 * @return: com.fc.protocol.common.message.body.ProtocolResponse
	 * @Author: linpeng
	 * @CreateDate: 2019/1/5
	 * @Update: linpeng
	 * @UpdateDate: 2019/1/5
	 */
    @ReqCodeMapping(requestClazz = WechatPlatformUserRequest.class)
    public ProtocolResponse wechatPlatformUserList(WechatPlatformUserRequest request) {
        log.info("获取用户管理列表------>request:{}", request);
        ProtocolResponse response=null;
        try {
            //校验参数是否为空
            String validResult = request.paramValidateList();
            if(validResult != null ) {
               return response = ProtocolResponse.newInstance().error(ErrorCode.PARAM_DATA.getValue()).msg(validResult);
            }
            Page page = new Page();
            page.setPage(request.getPage());
            page.setRows(request.getPagesize());
            log.info("查询用户管理列表，page:{}",page);
            List<WechatPlatformUser> wechatPlatformUser  = wechatPlatformUserService.getList(new HashMap<>(),page);
            log.info("查询结果 -----> count:{},data:{}", page.getTotalResult(),wechatPlatformUser);
            if ( wechatPlatformUser != null & wechatPlatformUser.size() != 0){
                response = ProtocolResponse.newInstance().success().addData("data",wechatPlatformUser).addData("count",page.getTotalResult());
            }
            else {
                response = ProtocolResponse.newInstance().error(1012).msg("未查到相关的用户管理列表");
            }
        } catch (Exception e) {
            e.printStackTrace();
            log.info("操作失败");
            return ProtocolResponse.newInstance().error(10199).msg("操作失败");
        }
        log.info("获取用户管理列表------>response:{}", response);
        return response;
    }


    /**
     * @Description: 创建微养车找店用户
     * @Param: [request]
     * @return: com.fc.protocol.common.message.body.ProtocolResponse
     * @Author: linpeng
     * @CreateDate: 2019/1/5
     * @Update: linpeng
     * @UpdateDate: 2019/1/5
     */
    @ReqCodeMapping(requestClazz = WechatPlatformUserRequest.class)
	public ProtocolResponse wechatPlatformUserSave(WechatPlatformUserRequest request) {
		log.info("创建用户------>request:{}", request);
		ProtocolResponse response=null;
		try {
            //校验参数是否为空
            String validResult = request.paramValidateSave();
            if(validResult != null ) {
               return response = ProtocolResponse.newInstance().error(ErrorCode.PARAM_DATA.getValue()).msg(validResult);
            }
			log.info("创建微养车找店用户，openID:{}", request.getOpenid());
			WechatPlatformUser wechatPlatformUser = new WechatPlatformUser();
			wechatPlatformUser.setFcUserId(request.getFc_user_id());
			wechatPlatformUser.setOpenid(request.getOpenid());
			wechatPlatformUser.setMobile(request.getMobile());
			wechatPlatformUser.setUnionid(request.getUnionid());
			wechatPlatformUser.setOpenNumber(1);
			wechatPlatformUser.setCreateTime((int) (new Date().getTime() / 1000));
			wechatPlatformUser.setWechatAvatar(request.getWechat_avatar());
			wechatPlatformUser.setWechatAccount(request.getWechat_account());
			int result = wechatPlatformUserService.insertPlatformUser(wechatPlatformUser);
			if (result != 0) {
                log.info("创建用户成功");
                response = ProtocolResponse.newInstance().success().msg("创建用户成功").addData("platform_user_id",wechatPlatformUserService.getByOpenid(request.getOpenid()).getPlatformUserId());
            }
            else{
                return ProtocolResponse.newInstance().error(1013).msg("创建用户失败");
            }
		} catch (Exception e) {
			e.printStackTrace();
			log.info("操作失败");
			return ProtocolResponse.newInstance().error(10199).msg("操作失败");
		}
		log.info("创建用户------>response:{}", response);
		return response;
	}

	/**
	 * @Description: 修改微养车找店用户信息
	 * @Param: [request]
	 * @return: com.fc.protocol.common.message.body.ProtocolResponse
	 * @Author: linpeng
	 * @CreateDate: 2019/1/5
	 * @Update: linpeng
	 * @UpdateDate: 2019/1/5
	 */
    @ReqCodeMapping(requestClazz = WechatPlatformUserRequest.class)
    public ProtocolResponse wechatPlatformUserUpdate(WechatPlatformUserRequest request) {
        log.info("修改用户信息------>request:{}", request);
        ProtocolResponse response=null;
        try {
            //校验参数是否为空
            String validResult = request.paramValidateUpdate();
            if(validResult != null ) {
               return response = ProtocolResponse.newInstance().error(ErrorCode.PARAM_DATA.getValue()).msg(validResult);
            }
            log.info("修改微养车找店用户信息，openid:{}", request.getOpenid());
            WechatPlatformUser wechatPlatformUser  = wechatPlatformUserService.getByOpenid(request.getOpenid());
            //先查询该用户是否存在
            if (wechatPlatformUser == null) {
                return ProtocolResponse.newInstance().error(1011).msg("该用户不存在");
            }
            //用户存在，执行后续操作
            log.info("修改前:{}", wechatPlatformUser);
            wechatPlatformUser.setFcUserId(request.getFc_user_id());
            wechatPlatformUser.setOpenid(request.getOpenid());
            wechatPlatformUser.setMobile(request.getMobile());
            wechatPlatformUser.setUnionid(request.getUnionid());
            wechatPlatformUser.setRecentTime((int) (new Date().getTime() / 1000));
            wechatPlatformUser.setWechatAvatar(request.getWechat_avatar());
            wechatPlatformUser.setWechatAccount(request.getWechat_account());
            int result = wechatPlatformUserService.updatePlatformUser(wechatPlatformUser);
            if (result != 0) {
                log.info("修改用户信息成功");
                log.info("修改后:{}", wechatPlatformUser);
                response = ProtocolResponse.newInstance().success().msg("修改用户成功").addData("data", wechatPlatformUserService.getByOpenid(request.getOpenid()));
            }
            else{
                return ProtocolResponse.newInstance().error(1014).msg("修改用户信息失败");
            }

        } catch (Exception e) {
            e.printStackTrace();
            log.info("操作失败");
            return ProtocolResponse.newInstance().error(10199).msg("操作失败");
        }
        log.info("修改用户信息------>response:{}", response);
        return response;
    }

   /**
    * @Description: 删除微养车找店用户
    * @Param: [request]
    * @return: com.fc.protocol.common.message.body.ProtocolResponse
    * @Author: linpeng
    * @CreateDate: 2019/1/5
    * @Update: linpeng
    * @UpdateDate: 2019/1/5
    */
    @ReqCodeMapping(requestClazz = WechatPlatformUserRequest.class)
    public ProtocolResponse wechatPlatformUserDelete(WechatPlatformUserRequest request) {
        log.info("删除用户------>request:{}", request);
        ProtocolResponse response=null;
        try {
            //校验参数是否为空
            String validResult = request.paramValidateDelete();
            if(validResult != null ) {
               return response = ProtocolResponse.newInstance().error(ErrorCode.PARAM_DATA.getValue()).msg(validResult);
            }
            log.info("删除微养车找店用户，openid:{}", request.getOpenid());
            WechatPlatformUser wechatPlatformUser  = wechatPlatformUserService.getByOpenid(request.getOpenid());
            //先查询该用户是否存在
            if (wechatPlatformUser == null) {
                return ProtocolResponse.newInstance().error(1011).msg("该用户不存在");
            }
            //用户存在，执行后续操作
            log.info("需要被删除的信息:{}", wechatPlatformUser);
            int result = wechatPlatformUserService.deletePlatformUser(wechatPlatformUser.getPlatformUserId());
            if (result != 0) {
                log.info("删除用户信息成功");
                response = ProtocolResponse.newInstance().success().msg("删除用户信息成功");
            }
            else{
                return ProtocolResponse.newInstance().error(1014).msg("删除用户信息失败");
            }
        } catch (Exception e) {
            e.printStackTrace();
            log.info("操作失败");
            return ProtocolResponse.newInstance().error(10199).msg("操作失败");
        }
        log.info("删除用户------>response:{}", response);
        return response;
    }
}
