package com.fc.member.wechatmaintain.user.handler;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.fc.common.exception.ErrorCode;
import com.fc.common.plugin.mybatis.Page;
import com.fc.common.util.DateTimeUtils;
import com.fc.member.wechatmaintain.user.entity.WechatMaintainUser;
import com.fc.member.wechatmaintain.user.service.IWechatMaintainUserService;
import com.fc.protocol.common.message.body.ProtocolResponse;
import com.fc.protocol.demo.request.wechatmaintain.user.WmUserByMobileRequest;
import com.fc.protocol.demo.request.wechatmaintain.user.WmUserByOpenIdRequest;
import com.fc.protocol.demo.request.wechatmaintain.user.WmUserByUnionIdRequest;
import com.fc.protocol.demo.request.wechatmaintain.user.WmUserCreateRequest;
import com.fc.protocol.demo.request.wechatmaintain.user.WmUserDetailsRequest;
import com.fc.protocol.demo.request.wechatmaintain.user.WmUserListRequest;
import com.fc.protocol.demo.request.wechatmaintain.user.WmUserUpdateRequest;
import com.fc.protocol.server.handler.Handler;
import com.fc.protocol.server.handler.ReqCodeMapping;

/**
 * 微养车用户信息
 * @author yangd
 * @date 2019年1月2日
 */
@Component
@Handler(module = "wechatmaintain")
public class WechatMaintainUserHandler {

	private static Logger log = LoggerFactory.getLogger(WechatMaintainUserHandler.class);

	@Autowired
	IWechatMaintainUserService wechatMaintainUserService;

	/**
	 * 查询微养车用户信息列表
	 * @author yangd
	 * @see update_name:yangd update_time:2019-01-05
	 * @param request
	 * @return
	 */
	@ReqCodeMapping(requestClazz = WmUserListRequest.class)
	public ProtocolResponse wmUserList(WmUserListRequest request) {
		log.info("时间:{} , wmUserList------>request:{}", DateTimeUtils.getNow(), request);

		ProtocolResponse response = ProtocolResponse.newInstance().success();
		try {
			// 分页对象
			Page page = new Page();
			page.setPage(request.getPage_no());
			page.setRows(request.getPage_size());
			page.setShowTotal(true);
			List<WechatMaintainUser> list = wechatMaintainUserService.getWechatMaintainUserListPage(page, request);
			response.addData("wechat_maintain_user_list", list).addData("page_count", page.getTotalPage())
					.addData("count", page.getTotalResult());
		} catch (Exception e) {
			log.error("wmUserList系统异常！", e);
			response.error(ErrorCode.QUERY_ERROR.getValue()).msg(ErrorCode.QUERY_ERROR.getDesc());
		}
		log.info("时间:{} , 返回结果 wmUserList------>response:{}", DateTimeUtils.getNow(), response);
		return response;
	}

	/**
	 * 查询微养车用户详情
	 * @author yangd
	 * @see update_name:yangd update_time:2019-01-05
	 * @param request
	 * @return
	 */
	@ReqCodeMapping(requestClazz = WmUserDetailsRequest.class)
	public ProtocolResponse wmUserDetails(WmUserDetailsRequest request) {
		log.info("时间:{} ,  wechatMaintainUserDetails------>request:{}", DateTimeUtils.getNow(), request);
		ProtocolResponse response = ProtocolResponse.newInstance().success();
		try {
			//校验参数是否为空
			String validResult = request.paramValidate();
			if (validResult != null) {
				return response.error(ErrorCode.PARAM_DATA.getValue()).msg(validResult);
			}
			WechatMaintainUser entity = wechatMaintainUserService.getByPK(request.getWechatMaintainUserId());
			response.addData("wechat_maintain_user", entity);
		} catch (Exception e) {
			log.error("wmUserDetails系统异常！", e);
			response.error(ErrorCode.QUERY_ERROR.getValue()).msg(ErrorCode.QUERY_ERROR.getDesc());
		}
		log.info("时间:{} , 返回结果 wmUserDetails------>response:{}", DateTimeUtils.getNow(), response);
		return response;
	}

	/**
	 * 根据openid查询微养车用户信息
	 * @author yangd
	 * @see update_name:yangd update_time:2019-01-05
	 * @param request
	 * @return
	 */
	@ReqCodeMapping(requestClazz = WmUserByOpenIdRequest.class)
	public ProtocolResponse wmUserByOpenId(WmUserByOpenIdRequest request) {
		log.info("时间:{} ,  wmUserByOpenId------>request:{}", DateTimeUtils.getNow(), request);
		ProtocolResponse response = ProtocolResponse.newInstance().success();
		try {
			//校验参数是否为空
			String validResult = request.paramValidate();
			if (validResult != null) {
				return response.error(ErrorCode.PARAM_DATA.getValue()).msg(validResult);
			}
			WechatMaintainUser entity = wechatMaintainUserService.getByOpenid(request.getOpenid());
			response.addData("wechat_maintain_user", entity);
		} catch (Exception e) {
			log.error("wmUserByOpenId系统异常！", e);
			response.error(ErrorCode.QUERY_ERROR.getValue()).msg(ErrorCode.QUERY_ERROR.getDesc());
		}
		log.info("时间:{} , 返回结果 wmUserByOpenId------>response:{}", DateTimeUtils.getNow(), response);
		return response;
	}

	/**
	 * 根据unionid查询微养车用户信息
	 * @author yangd
	 * @see update_name:yangd update_time:2019-01-05
	 * @param request
	 * @return
	 */
	@ReqCodeMapping(requestClazz = WmUserByUnionIdRequest.class)
	public ProtocolResponse wmUserByUnionId(WmUserByUnionIdRequest request) {
		log.info("时间:{} ,  wmUserByUnionId------>request:{}", DateTimeUtils.getNow(), request);
		ProtocolResponse response = ProtocolResponse.newInstance().success();
		try {
			//校验参数是否为空
			String validResult = request.paramValidate();
			if (validResult != null) {
				return response.error(ErrorCode.PARAM_DATA.getValue()).msg(validResult);
			}
			WechatMaintainUser entity = wechatMaintainUserService.getByUnionId(request.getUnionid());
			response.addData("wechat_maintain_user", entity);
		} catch (Exception e) {
			log.error("wmUserByUnionId系统异常！", e);
			response.error(ErrorCode.QUERY_ERROR.getValue()).msg(ErrorCode.QUERY_ERROR.getDesc());
		}
		log.info("时间:{} , 返回结果 wmUserByUnionId------>response:{}", DateTimeUtils.getNow(), response);
		return response;
	}

	/**
	 * 根据手机号查询用户信息
	 * @author yangd
	 * @see update_name:yangd update_time:2019-01-05
	 * @param request
	 * @return
	 */
	@ReqCodeMapping(requestClazz = WmUserByMobileRequest.class)
	public ProtocolResponse wmUserByMobile(WmUserByMobileRequest request) {
		log.info("时间:{} ,  wmUserByMobile------>request:{}", DateTimeUtils.getNow(), request);
		ProtocolResponse response = ProtocolResponse.newInstance().success();
		try {
			//校验参数是否为空
			String validResult = request.paramValidate();
			if (validResult != null) {
				return response.error(ErrorCode.PARAM_DATA.getValue()).msg(validResult);
			}
			WechatMaintainUser entity = wechatMaintainUserService.getByMobile(request.getMobile());
			response.addData("wechat_maintain_user", entity);
		} catch (Exception e) {
			log.error("wmUserByMobile系统异常！", e);
			response.error(ErrorCode.QUERY_ERROR.getValue()).msg(ErrorCode.QUERY_ERROR.getDesc());
		}
		log.info("时间:{} , 返回结果 wmUserByMobile------>response:{}", DateTimeUtils.getNow(), response);
		return response;
	}

	/**
	 * 创建用户信息
	 * @author yangd
	 * @see update_name:yangd update_time:2019-01-05
	 * @param request
	 * @return
	 */
	@ReqCodeMapping(requestClazz = WmUserCreateRequest.class)
	public ProtocolResponse wmUserCreate(WmUserCreateRequest request) {
		log.info("时间:{} ,  wmUserCreate------>request:{}", DateTimeUtils.getNow(), request);
		ProtocolResponse response = ProtocolResponse.newInstance().success();
		try {
			//校验参数是否为空
			String validResult = request.paramValidate();
			if (validResult != null) {
				return response.error(ErrorCode.PARAM_DATA.getValue()).msg(validResult);
			}

			int resultStatus = wechatMaintainUserService.insertSelective(request);
			log.info("resultStatus------>{}", resultStatus);
			if (resultStatus > 0) {
				response.msg("添加成功");
			} else {
				response.error(ErrorCode.CREATE_ERROR.getValue()).msg(ErrorCode.CREATE_ERROR.getDesc());
			}
		} catch (Exception e) {
			log.error("wmUserCreate系统异常！", e);
			response.error(ErrorCode.CREATE_ERROR.getValue()).msg(ErrorCode.CREATE_ERROR.getDesc());
		}
		log.info("时间:{} , 返回结果 wmUserCreate------>response:{}", DateTimeUtils.getNow(), response);
		return response;
	}

	/**
	 * 修改用户信息、完善用户信息、修改手机号、绑定手机号
	 * @param request
	 * @return
	 */
	@ReqCodeMapping(requestClazz = WmUserUpdateRequest.class)
	public ProtocolResponse wmUserUpdate(WmUserUpdateRequest request) {
		log.info("时间:{} , wmUserUpdate------>request:{}", DateTimeUtils.getNow(), request);
		ProtocolResponse response = ProtocolResponse.newInstance().success();
		try {
			//校验参数是否为空
			String validResult = request.paramValidate();
			if (validResult != null) {
				return response.error(ErrorCode.PARAM_DATA.getValue()).msg(validResult);
			}
			boolean resultStatus = wechatMaintainUserService.updateWechatMaintainUser(request);
			log.info("resultStatus------>{}", resultStatus);
			if (resultStatus) {
				response.msg("更新成功");
			} else {
				response.error(ErrorCode.UPDATE_ERROR.getValue()).msg(ErrorCode.UPDATE_ERROR.getDesc());
			}
		} catch (Exception e) {
			log.error("wmUserUpdate系统异常！", e);
			response.error(ErrorCode.UPDATE_ERROR.getValue()).msg(ErrorCode.UPDATE_ERROR.getDesc());
		}
		log.info("时间:{} , 返回结果 wmUserUpdate------>response:{}", DateTimeUtils.getNow(), response);
		return response;
	}

}
