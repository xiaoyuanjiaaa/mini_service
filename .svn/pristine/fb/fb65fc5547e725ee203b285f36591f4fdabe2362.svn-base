package com.fc.member.wechatmaintain.user.service.impl;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.fc.common.plugin.mybatis.IMapper;
import com.fc.common.plugin.mybatis.Page;
import com.fc.common.plugin.mybatis.PageQuery;
import com.fc.common.service.impl.ServiceImpl;
import com.fc.common.util.DateTimeUtils;
import com.fc.member.wechatmaintain.user.dao.IWechatMaintainRechargeDao;
import com.fc.member.wechatmaintain.user.entity.WechatMaintainRecharge;
import com.fc.member.wechatmaintain.user.service.IWechatMaintainRechargeService;
import com.fc.protocol.demo.request.wechatmaintain.user.WmRechargeCreateRequest;
import com.fc.protocol.demo.request.wechatmaintain.user.WmRechargeListPageRequest;
import com.fc.protocol.demo.request.wechatmaintain.user.WmRechargeStoreRequest;
import com.fc.protocol.demo.request.wechatmaintain.user.WmRechargeUpdateRequest;
import com.fc.protocol.demo.request.wechatmaintain.user.WmRechargeUserListRequest;

/**
 * <p>Title: WechatMaintainRecharge</p>
 * <p>Description: 微养车用户储值卡充值记录 Service 层</p>
 * @author yangd
 * @date 2018-12-28 17:13:47
 */
@Service("wechatMaintainRechargeService")
public class WechatMaintainRechargeServiceImp extends ServiceImpl<WechatMaintainRecharge>
		implements IWechatMaintainRechargeService {

	private static Logger log = LoggerFactory.getLogger(WechatMaintainRechargeServiceImp.class);

	@Autowired
	private IWechatMaintainRechargeDao wechatMaintainRechargeDao;

	@Override
	protected IMapper<WechatMaintainRecharge> getDao() {
		return wechatMaintainRechargeDao;
	}

	/**
	 * 插入数据
	 */
	@Override
	public int insertSelective(WmRechargeCreateRequest request) {
		log.info("insertSelective---------->:" + request);
		// 将不为空的属性set到对象中
		WechatMaintainRecharge entity = isNotEmptySetObjectInsert(request);
		log.info("WechatMaintainRecharge---------->:" + entity);
		return wechatMaintainRechargeDao.insertSelective(entity);
	}

	/**
	 * 更新数据
	 */
	@Override
	public boolean updateWechatMaintainRecharge(WmRechargeUpdateRequest request) throws Exception {
		log.info("updateWechatMaintainRecharge---------->:" + request);
		// 将不为空的属性set到对象中
		WechatMaintainRecharge entity = isNotEmptySetObjectUpdate(request);
		log.info("WechatMaintainRecharge---------->:" + entity);
		return wechatMaintainRechargeDao.update(entity);
	}

	/**
	 * 查询微养车用户储值卡充值记录-分页
	 */
	@Override
	public List<WechatMaintainRecharge> getWechatMaintainRechargeListPage(Page page,
			WmRechargeListPageRequest request) {
		log.info("getWechatMaintainRechargeListPage---------->:" + request);
		// set 对象属性值
		WechatMaintainRecharge entity = isNotEmptySetObjectListPage(request);
		log.info("WechatMaintainRecharge---------->{}", entity.toString());
		// 设置分页，查询条件
		PageQuery pageQuery = new PageQuery();
		pageQuery.setPage(page);
		pageQuery.setCondition(entity);
		return wechatMaintainRechargeDao.getRowsPage(pageQuery);
	}

	/**
	 * 用户储值卡充值记录-分页
	 */
	@Override
	public List<WechatMaintainRecharge> getUserRechargeListPage(Page page, WmRechargeUserListRequest request) {
		log.info("getUserRechargeListPage---------->:" + request);
		// set 对象属性值
		WechatMaintainRecharge entity = new WechatMaintainRecharge();
		entity.setFcUserId(request.getFcUserId());
		log.info("WechatMaintainRecharge---------->{}", entity.toString());
		// 设置分页，查询条件
		PageQuery pageQuery = new PageQuery();
		pageQuery.setPage(page);
		pageQuery.setCondition(entity);
		return wechatMaintainRechargeDao.getRowsPage(pageQuery);
	}

	/**
	 * 门店APP储值卡充值记录-分页
	 */
	@Override
	public List<WechatMaintainRecharge> getStoreRechargeListPage(Page page, WmRechargeStoreRequest request) {
		log.info("getStoreRechargeListPage---------->:" + request);
		// set 对象属性值
		WechatMaintainRecharge entity = new WechatMaintainRecharge();
		entity.setStoreId(request.getStoreId());
		log.info("WechatMaintainRecharge---------->{}", entity.toString());
		// 设置分页，查询条件
		PageQuery pageQuery = new PageQuery();
		pageQuery.setPage(page);
		pageQuery.setCondition(entity);
		return wechatMaintainRechargeDao.getRowsPage(pageQuery);
	}

	/**
	 * 将不为空的属性set到对象中
	 * @param entity 实体对象
	 * @param request 参数对象
	 * @return
	 */
	public static WechatMaintainRecharge isNotEmptySetObjectInsert(WmRechargeCreateRequest request) {
		WechatMaintainRecharge entity = new WechatMaintainRecharge();
		entity.setFcUserId(request.getFcUserId());
		entity.setStoreId(request.getStoreId());
		entity.setWechatSstorePackageId(request.getWechatSstorePackageId());
		entity.setRealAccount(request.getRealAccount());
		entity.setDiscount(request.getDiscount());
		entity.setCreateTime(DateTimeUtils.getDateTimeInteger());
		entity.setStatus(request.getStatus());
		entity.setOrderNo(request.getOrderNo());
		return entity;
	}

	/**
	 * 将不为空的属性set到对象中
	 * @param entity 实体对象
	 * @param request 参数对象
	 * @return
	 */
	public static WechatMaintainRecharge isNotEmptySetObjectUpdate(WmRechargeUpdateRequest request) {
		WechatMaintainRecharge entity = new WechatMaintainRecharge();
		entity.setWechatMaintainRechargeId(request.getWechatMaintainRechargeId());
		//		entity.setFcUserId(request.getFcUserId());
		//		entity.setStoreId(request.getStoreId());
		//		entity.setWechatSstorePackageId(request.getWechatSstorePackageId());
		entity.setRealAccount(request.getRealAccount());
		entity.setDiscount(request.getDiscount());
		entity.setStatus(request.getStatus());
		//		entity.setOrderNo(request.getOrderNo());
		return entity;
	}

	/**
	 * 将不为空的属性set到对象中
	 * @param entity 实体对象
	 * @param request 参数对象
	 * @return
	 */
	public static WechatMaintainRecharge isNotEmptySetObjectListPage(WmRechargeListPageRequest request) {
		WechatMaintainRecharge entity = new WechatMaintainRecharge();
		entity.setFcUserId(request.getFcUserId());
		entity.setStoreId(request.getStoreId());
		entity.setWechatSstorePackageId(request.getWechatSstorePackageId());
		entity.setRealAccount(request.getRealAccount());
		entity.setDiscount(request.getDiscount());
		entity.setStatus(request.getStatus());
		entity.setOrderNo(request.getOrderNo());
		return entity;
	}
}
