package com.fc.protocol.client.demo.controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.fc.protocol.client.IProtocolClient;
import com.fc.protocol.client.demo.config.ProtocolClientPool;
import com.fc.protocol.common.message.body.ProtocolResponse;
import com.fc.protocol.demo.request.store.user.StoreAddressCreateRequest;
import com.fc.protocol.demo.request.store.user.StoreAddressDeleteRequest;
import com.fc.protocol.demo.request.store.user.StoreAddressListRequest;
import com.fc.protocol.demo.request.store.user.StoreAddressUpdateRequest;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

/**
 * 门店关注店铺
 * @author wangq
 * @date  2019/1/8
 */

@Api(tags = "StoreAddressController", description = "收货地址")
@RestController
@RequestMapping("/store/user")
public class StoreAddressController {

	private static Logger log = LoggerFactory.getLogger(StoreAddressController.class);

	@Autowired
	private ProtocolClientPool protocolClientPool;

	/**
	 * 查询收货地址列表
	 * @param request
	 * @param response
	 * @param addressRequest
	 * @throws Exception
	 */
	@RequestMapping(value = "/storeAddressList", method = { RequestMethod.POST, RequestMethod.GET })
	@ApiOperation(value = "查询收货地址列表", notes = "查询收货地址列表")
	@ResponseBody
	public Object storeAddressList(HttpServletRequest request, HttpServletResponse response,
			StoreAddressListRequest addressRequest) throws Exception {
		log.info("storeAddressList----->request:{}", addressRequest);
		log.info("protocolClientPool--->null?--->{}", (protocolClientPool == null));
		IProtocolClient userClient = protocolClientPool.userClient();
		log.info("userClient--->null?--->{}" + (userClient == null));
		ProtocolResponse addressResponse = protocolClientPool.userClient().sendAndReceived(addressRequest);
		log.info("storeAddressList---------->response:{}", addressResponse);
		return addressResponse;

	}

	/**
	 * 新增收货地址
	 * @param request
	 * @param response
	 * @param addressRequest
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/storeAddressCreate", method = { RequestMethod.POST, RequestMethod.GET })
	@ApiOperation(value = "新增收货地址", notes = "新增收货地址")
	@ResponseBody
	public Object storeAddressCreate(HttpServletRequest request, HttpServletResponse response,
			StoreAddressCreateRequest addressRequest) throws Exception {
		log.info("storeAddressCreate------->request:{}", addressRequest);
		log.info("protocolClientPoll--->null?--->{}", (protocolClientPool == null));
		IProtocolClient userClient = protocolClientPool.userClient();
		log.info("userClient--->null?--->{}" + (userClient == null));
		ProtocolResponse addressResponse = protocolClientPool.userClient().sendAndReceived(addressRequest);
		log.info("storeAddressCreate---------->response:{}", addressResponse);
		return addressResponse;
	}

	/**
	 * 删除收货地址
	 * @param request
	 * @param response
	 * @param addressRequest
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/storeAddressDelete", method = { RequestMethod.POST, RequestMethod.GET })
	@ApiOperation(value = "删除收货地址", notes = "删除收货地址")
	@ResponseBody
	public Object storeAddressDelete(HttpServletRequest request, HttpServletResponse response,
			StoreAddressDeleteRequest addressRequest) throws Exception {
		log.info("storeAddressDelete------------>request:{}", addressRequest);
		log.info("protocolClientPoll--->null?---?{}", (protocolClientPool == null));
		IProtocolClient userClient = protocolClientPool.userClient();
		log.info("userClient--->null?--->{}" + (userClient == null));
		ProtocolResponse addressResponse = protocolClientPool.userClient().sendAndReceived(addressRequest);
		log.info("storeAddressDelete-------->response:{}", addressResponse);
		return addressResponse;

	}

	/**
	 * 修改收货地址
	 * @param request
	 * @param response
	 * @param addressRequest
	 * @throws Exception
	 */
	@RequestMapping(value = "/storeAddressUpdate", method = { RequestMethod.POST, RequestMethod.GET })
	@ApiOperation(value = "修改收货地址", notes = "修改收货地址")
	@ResponseBody
	public Object storeAddressUpdate(HttpServletRequest request, HttpServletResponse response,
			StoreAddressUpdateRequest addressRequest) throws Exception {
		log.info("storeAddressUpdate------------>request:{}", addressRequest);
		log.info("protocolClientPoll--->null?---?{}", (protocolClientPool == null));
		IProtocolClient userClient = protocolClientPool.userClient();
		log.info("userClient--->null?--->{}" + (userClient == null));
		ProtocolResponse addressResponse = protocolClientPool.userClient().sendAndReceived(addressRequest);
		log.info("storeAddressUpdate-------->response:{}", addressResponse);
		return addressResponse;

	}

}
